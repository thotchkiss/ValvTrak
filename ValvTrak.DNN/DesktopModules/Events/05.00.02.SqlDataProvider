    /************************************************************/
    /*****                                                  *****/
    /*****       SqlDataProvider                            *****/
    /*****       Install/Upgrade for Events module 05.00.02 *****/
    /*****                                                  *****/
    /***** Note: To manually execute this script you must   *****/
    /*****       perform a search AND replace operation     *****/
    /*****       for {databaseOwner} AND {objectQualifier}  *****/
    /*****       or use 'SQL' FROM Host Menu AND run this.  *****/
    /*****                                                  *****/
    /************************************************************/

/************************************************************/
/************************************************************/
/*****                                                  *****/
/*****               Miscellaneous Updates              *****/
/*****                                                  *****/
/************************************************************/
/************************************************************/

/* Add event description to tooltip template if previously enabled in module settings*/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[#{objectQualifier}tmpModules') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
DROP TABLE {databaseOwner}#{objectQualifier}tmpModules

CREATE TABLE {databaseOwner}#{objectQualifier}tmpModules (ModuleID Int)

INSERT {databaseOwner}#{objectQualifier}tmpModules (ModuleID)
SELECT ModuleID FROM {databaseOwner}{objectQualifier}ModuleSettings WHERE SettingName = 'tooltipdescription' AND SettingValue = 'True'

DELETE FROM {databaseOwner}#{objectQualifier}tmpModules 
WHERE ModuleID IN (SELECT ModuleID FROM {databaseOwner}{objectQualifier}ModuleSettings WHERE SettingName = 'txtTooltipTemplateBodyNT')

INSERT {databaseOwner}{objectQualifier}ModuleSettings 
(
		ModuleID,
		SettingName,
		SettingValue
	)
SELECT ModuleID, 'txtTooltipTemplateBodyNT' AS SName, '[event:title] - [NOTALLDAYEVENT][event:startdate|g][/NOTALLDAYEVENT][ALLDAYEVENT][event:startdate|d][/ALLDAYEVENT][DISPLAYENDDATE] - [NOTALLDAYEVENT][event:enddate|g][/NOTALLDAYEVENT][ALLDAYEVENT][event:enddate|d][/ALLDAYEVENT][/DISPLAYENDDATE] [event:description]' AS SValue
FROM {databaseOwner}#{objectQualifier}tmpModules

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[#{objectQualifier}tmpModules') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
DROP TABLE {databaseOwner}#{objectQualifier}tmpModules
GO

/************************************************************/
/************************************************************/
/*****                                                  *****/
/*****     Create Stored Procedures                     *****/
/*****                                                  *****/
/************************************************************/
/************************************************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSave]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGet]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByRange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByRange]
GO

/* EventsSave */

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSave
(
	@PortalID int,
	@EventID int,
	@RecurMasterID int,
	@ModuleID int,
	@EventDateBegin datetime,
	@EventDateEnd datetime,
	@EventTimeBegin datetime,
	@Duration int,
	@EventName nvarchar(100),
	@EventDesc ntext,
	@Importance int,
	@CreatedBy varchar(100),
	@CreatorID varchar(100),
	@Every int,
	@Period nvarchar(10),
	@RepeatType char(10),
	@Notify nvarchar(2048),
	@Approved bit,
	@Signups bit,
	@MaxEnrollment int,
	@EnrollRoleID varchar(50),
	@EnrollFee money, 
	@EnrollType varchar(10),
	@PayPalAccount varchar(100), 
	@PayPalPassword varchar(100), 
	@Cancelled bit,
	@DetailPage bit,
	@DetailNewWin bit,
	@DetailURL varchar(100),
	@ImageURL varchar(100), 
	@ImageType varchar(1), 
	@ImageWidth int,
	@ImageHeight int,
	@ImageDisplay bit,
	@Location int,
	@LocationName nvarchar(50),
	@MapURL varchar(255),
	@Category int,
	@CategoryName nvarchar(50),
	@Color varchar(10),
	@FontColor varchar(10),
	@Reminder nvarchar(2048),
	@TimezoneOffset int,
	@SendReminder bit,
	@ReminderTime int,
	@ReminderTimeMeasurement varchar(2),
	@ReminderFrom nvarchar(100),
	@SearchSubmitted bit,
	@CustomField1 nvarchar(100),
	@CustomField2 nvarchar(100),
	@EnrollListView bit,
	@DisplayEndDate bit,
	@AllDayEvent bit,
	@OwnerID int,
	@LastUpdatedBy varchar(100),
	@LastUpdatedID int,
	@OriginalDateBegin datetime,
	@NewEventEmailSent bit,
	@SaveOnly bit
)
AS
SET DATEFORMAT mdy
IF @Location = -1 
	Select @Location = Null

IF @Category = -1 
	Select @Category = Null

IF @EventID = -1 OR @EventID IS NULL
	INSERT {databaseOwner}{objectQualifier}Events
	(
		PortalID,
		RecurMasterID,
		ModuleID,
		EventDateBegin,
		EventDateEnd,
		EventTimeBegin,
		Duration,
		EventName,
		EventDesc,
		Importance,
		CreatedBy,
		Every,
		Period,
		RepeatType,
		Notify,
		Approved,
		Signups,
		MaxEnrollment,
		EnrollRoleID,
		EnrollFee, 
		EnrollType, 
		PayPalAccount, 
		PayPalPassword, 
		Cancelled,
		DetailPage,
		DetailNewWin,
		DetailURL,
		ImageURL, 
		ImageType, 
		ImageWidth,
		ImageHeight,
		ImageDisplay,
		Location,
		Category,
		Reminder,
		TimezoneOffset,
		SendReminder,
		ReminderTime,
		ReminderTimeMeasurement,
		ReminderFrom,
		SearchSubmitted,
		CustomField1,
		CustomField2,
		EnrollListView,
		DisplayEndDate,
		AllDayEvent,
		OwnerID,
		LastUpdatedAt,
		LastUpdatedID,
		OriginalDateBegin,
		NewEventEmailSent
	)
	VALUES
	(
		@PortalID,
		@RecurMasterID,
		@ModuleID,
		@EventDateBegin,
		@EventDateEnd,
		@EventTimeBegin,
		@Duration,
		@EventName,
		@EventDesc,
		@Importance,
		@CreatorID,
		@Every,
		@Period,
		@RepeatType,
		@Notify,
		@Approved,
		@Signups,
		@MaxEnrollment,
		@EnrollRoleID,
		@EnrollFee, 
		@EnrollType,
		@PayPalAccount, 
		@PayPalPassword, 
		@Cancelled,
		@DetailPage,
		@DetailNewWin,
		@DetailURL,
		@ImageURL, 
		@ImageType, 
		@ImageWidth,
		@ImageHeight,
		@ImageDisplay,
		@Location,
		@Category,
		@Reminder,
		@TimezoneOffset,
		@SendReminder,
		@ReminderTime,
		@ReminderTimeMeasurement,
		@ReminderFrom,
		@SearchSubmitted,
		@CustomField1,
		@CustomField2,
		@EnrollListView,
		@DisplayEndDate,
		@AllDayEvent,
		@OwnerID,
		GetUTCDate(),
		@LastUpdatedID,
		@OriginalDateBegin,
		@NewEventEmailSent
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}Events SET
		PortalID = @PortalID,
		RecurMasterID = @RecurMasterID,
		EventDateBegin = @EventDateBegin,
		EventDateEnd = @EventDateEnd,
		EventTimeBegin = @EventTimeBegin,
		Duration = @Duration,
		EventName = @EventName,
		EventDesc = @EventDesc,
		Importance = @Importance,
		Every = @Every,
		Period = @Period,
		RepeatType = @RepeatType,
		Notify = @Notify,
		Approved = @Approved,
		Signups = @Signups,
		MaxEnrollment = @MaxEnrollment,
		EnrollRoleID = @EnrollRoleID,
		EnrollFee = @EnrollFee, 
		EnrollType = @EnrollType,
		PayPalAccount = @PayPalAccount, 
		PayPalPassword = @PayPalPassword, 
		Cancelled = @Cancelled,
		DetailPage = @DetailPage,
		DetailNewWin = @DetailNewWin,
		DetailURL = @DetailURL,
		ImageURL = @ImageURL, 
		ImageType = @ImageType, 
		ImageWidth = @ImageWidth,
		ImageHeight = @ImageHeight,
		ImageDisplay = @ImageDisplay,
		Location = @Location,
		Category = @Category,
		Reminder = @Reminder,
		TimezoneOffset = @TimezoneOffset,
		SendReminder = @SendReminder,
		ReminderTime = @ReminderTime,
		ReminderTimeMeasurement = @ReminderTimeMeasurement,
		ReminderFrom = @ReminderFrom,
		SearchSubmitted = @SearchSubmitted,
		CustomField1 = @CustomField1,
		CustomField2 = @CustomField2,
		EnrollListView = @EnrollListView,
		DisplayEndDate = @DisplayEndDate,
		AllDayEvent = @AllDayEvent,
		OwnerID = @OwnerID,
		LastUpdatedAt = GetUTCDate(),
		LastUpdatedID = @LastUpdatedID,
		OriginalDateBegin = @OriginalDateBegin,
		NewEventEmailSent = @NewEventEmailSent
WHERE EventID = @EventID And ModuleID = @ModuleID

IF @SaveOnly = 0
SELECT E.PortalID, EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
	E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
	E.Importance, E.CreatedDate, 
    CreatedBy = U.DisplayName,
	CreatorID =  E.CreatedBy,
	E.Every,
	E.Period,
	E.RepeatType,
	E.Notify,
	E.Approved,
	E.Signups,
	E.MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
    (Select count(*) from {databaseOwner}{objectQualifier}Events as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as NoOfRecurrences,
    (Select max(EventDateBegin) from {databaseOwner}{objectQualifier}Events as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as LastRecurrence,
	E.EnrollRoleID,
	E.EnrollFee, 
	E.EnrollType, 
	E.PayPalAccount, 
	E.PayPalPassword, 
	E.Cancelled,
	E.DetailPage,
	E.DetailNewWin,
	E.DetailURL,
	E.ImageURL, 
	E.ImageType, 
	E.ImageWidth,
	E.ImageHeight,
	E.ImageDisplay,
	c.Location,
	c.LocationName,
	c.MapURL,
	b.Category,
	b.CategoryName,
	b.Color,
	b.FontColor,
	E.Reminder,
	E.TimezoneOffset,
	E.SendReminder,
	E.ReminderTime,
	E.ReminderTimeMeasurement,
	E.ReminderFrom,
	E.CustomField1,
	E.CustomField2,
	E.EnrollListView,
	E.DisplayEndDate,
	E.AllDayEvent,
	E.OwnerID,
	OwnerName = O.DisplayName,
	E.LastUpdatedAt,
    LastUpdatedBy = L.DisplayName,
	E.LastUpdatedID,
	r.RRULE,
	RMOwnerID = r.OwnerID,
	E.OriginalDateBegin,
	E.NewEventEmailSent
FROM {databaseOwner}{objectQualifier}Events E
inner join {databaseOwner}{objectQualifier}EventsRecurMaster AS r on E.RecurMasterID = r.RecurMasterID
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left outer join {databaseOwner}{objectQualifier}Users O on E.OwnerID = O.UserID
left outer join {databaseOwner}{objectQualifier}Users L on E.LastUpdatedID = L.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE EventID = scope_identity()
GO

/* EventsGet */

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGet
(
	@EventID int,
	@ModuleID int
)
AS
SET DATEFORMAT mdy

CREATE Table #RealModuleID
	(EventID Int,
	 ModuleID Int)

DECLARE @SQL NVarchar(2000)
SELECT @SQL = 'Insert into #RealModuleID (EventID, ModuleID) Select distinct e.EventID, e.ModuleID '
			+ 'From {databaseOwner}{objectQualifier}Events e '
			+ 'left outer join {databaseOwner}{objectQualifier}EventsMaster m ON e.ModuleID = m.SubEventID '
			+ 'WHERE EventID = '+ CONVERT(VARCHAR, @EventID) + ' And '
			+ '(e.ModuleID = ' + CONVERT(VARCHAR, @ModuleID) + ' Or m.ModuleID = ' + CONVERT(VARCHAR, @ModuleID) + ')'

EXEC ( @sql )


SELECT E.PortalID, E.EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd,
	E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc,
	E.Importance, E.CreatedDate, 
    CreatedBy = u.DisplayName,
	CreatorID =  E.CreatedBy,
	E.Every,
	E.Period,
	E.RepeatType,
	E.Notify,
	E.Approved,
	E.Signups,
	E.MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
    (Select count(*) from {databaseOwner}{objectQualifier}Events as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as NoOfRecurrences,
    (Select max(EventDateBegin) from {databaseOwner}{objectQualifier}Events as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as LastRecurrence,
	E.EnrollRoleID,
	E.EnrollFee, 
	E.EnrollType, 
	E.PayPalAccount, 
	E.PayPalPassword, 
	E.Cancelled,
	E.DetailPage,
	E.DetailNewWin,
	E.DetailURL,
	E.ImageURL, 
	E.ImageType, 
	E.ImageWidth,
	E.ImageHeight,
	E.ImageDisplay,
	E.Location,
	c.LocationName,
	c.MapURL,
	E.Category,
	b.CategoryName,
	b.Color,
	b.FontColor,
	E.Reminder,
	E.TimezoneOffset,
	E.SendReminder,
	E.ReminderTime,
	E.ReminderTimeMeasurement,
	E.ReminderFrom,
	E.SearchSubmitted,
	E.CustomField1,
	E.CustomField2,
	E.EnrollListView,
	E.DisplayEndDate,
	E.AllDayEvent,
	E.OwnerID,
	OwnerName = O.DisplayName,
	E.LastUpdatedAt,
    LastUpdatedBy = L.DisplayName,
	E.LastUpdatedID,
	(Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle,
	r.RRULE, 
	RMOwnerID = r.OwnerID,
	E.OriginalDateBegin,
	E.NewEventEmailSent
FROM {databaseOwner}{objectQualifier}Events E
inner join {databaseOwner}{objectQualifier}EventsRecurMaster AS r on E.RecurMasterID = r.RecurMasterID
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left outer join {databaseOwner}{objectQualifier}Users O on E.OwnerID = O.UserID
left outer join {databaseOwner}{objectQualifier}Users L on E.LastUpdatedID = L.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE EventID = @EventID And e.ModuleID = (Select ModuleID from #RealModuleID where EventID = @EventID)
GO

/*** EventsGetByRange ***/

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGetByRange
(
 @Filter nvarchar(500),
 @BeginDate datetime,
 @EndDate datetime
)
AS
SET DATEFORMAT mdy
Declare @sql nvarchar(4000)
Select @sql = 'SELECT E.PortalID, E.EventID, E.RecurMasterID, E.ModuleID, E.EventDateBegin, E.EventDateEnd, '
 + 'E.EventTimeBegin, E.Duration, E.EventName, E.EventDesc, '
 + 'E.Importance, E.CreatedDate,  '
 + 'CreatedBy = U.DisplayName, '
 + 'CreatorID =  E.CreatedBy, '
 + 'E.Every, '
 + 'E.Period, '
 + 'E.RepeatType, '
 + 'E.Notify, '
 + 'E.approved, '
 + 'E.Signups, '
 + 'E.MaxEnrollment, '
 + '(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled, '
 + '(Select count(*) from {databaseOwner}{objectQualifier}Events as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as NoOfRecurrences, '
 + '(Select max(EventDateBegin) from {databaseOwner}{objectQualifier}Events as E2 WHERE E2.RecurMasterID = E.RecurMasterID and E2.Cancelled = 0 and E2.Approved = 1) as LastRecurrence, '
 + 'E.EnrollRoleID, '
 + 'E.EnrollFee, '
 + 'E.EnrollType, '
 + 'E.PayPalAccount, '
 + 'E.PayPalPassword, '
 + 'E.Cancelled, '
 + 'E.DetailPage, '
 + 'E.DetailNewWin, '
 + 'E.DetailURL, '
 + 'E.ImageURL, '
 + 'E.ImageType, '
 + 'E.ImageWidth, '
 + 'E.ImageHeight, '
 + 'E.ImageDisplay, '
 + 'E.Location, '
 + 'c.LocationName, '
 + 'c.MapURL, '
 + 'E.Category, '
 + 'b.CategoryName, '
 + 'b.Color, '
 + 'b.FontColor, '
 + 'E.Reminder, '
 + 'E.TimezoneOffset, '
 + 'E.SendReminder, '
 + 'E.ReminderTime, '
 + 'E.ReminderTimeMeasurement, '
 + 'E.ReminderFrom, '
 + 'E.SearchSubmitted, '
 + 'E.CustomField1, '
 + 'E.CustomField2, '
 + 'E.EnrollListView, '
 + 'E.DisplayEndDate, '
 + 'E.AllDayEvent, '
 + 'E.OwnerID, '
 + 'OwnerName = O.DisplayName, '
 + 'E.LastUpdatedAt, '
 + 'LastUpdatedBy = L.DisplayName, '
 + 'E.LastUpdatedID, '
 + '(Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle, '
 + 'RMOwnerID = r.OwnerID, '
 + 'r.RRULE, '
 + 'E.OriginalDateBegin, '
 + 'E.NewEventEmailSent '
 + 'FROM {databaseOwner}{objectQualifier}Events E '
 + 'inner join {databaseOwner}{objectQualifier}EventsRecurMaster AS r on E.RecurMasterID = r.RecurMasterID '
 + 'left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID '
 + 'left outer join {databaseOwner}{objectQualifier}Users O on E.OwnerID = O.UserID '
 + 'left outer join {databaseOwner}{objectQualifier}Users L on E.LastUpdatedID = L.UserID '
 + 'left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category '
 + 'left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location '
 + 'WHERE ((E.EventTimeBegin <= DATEADD(DAY,1,''' + convert(varchar, @EndDate) + ''') AND DATEADD(minute,E.Duration,E.EventTimeBegin) >= ''' + convert(varchar, @BeginDate) + ''') OR '
 + '  (E.EventTimeBegin BETWEEN ''' + convert(varchar, @BeginDate) + ''' AND DATEADD(DAY,1,''' + convert(varchar, @EndDate) + '''))) '
 + '  AND E.Approved = 1'
 + '  AND E.Cancelled = 0'
 + ' ' + @Filter + ' '
 + ' ORDER BY E.EventDateBegin, E.EventTimeBegin, E.EventDateEnd'
EXEC (@sql)
GO


