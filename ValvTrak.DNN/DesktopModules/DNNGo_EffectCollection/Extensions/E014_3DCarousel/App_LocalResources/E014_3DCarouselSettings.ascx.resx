<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblHeight.Help" xml:space="preserve">
    <value>The height of the image at the frontend.</value>
  </data>
  <data name="lblHeight.Text" xml:space="preserve">
    <value>Height:</value>
  </data>
  <data name="lblWidth.Help" xml:space="preserve">
    <value>The width of the image at the frontend.</value>
  </data>
  <data name="lblWidth.Text" xml:space="preserve">
    <value>Width:</value>
  </data>
  <data name="lblAutoRotate.Help" xml:space="preserve">
    <value>Turn on auto-rotation of the carousel using either 'left' or 'right' as the value. The carousel will rotate between items automatically. The auto-rotation stops when the user hovers over the carousel area, and starts again when the mouse is moved off.</value>
  </data>
  <data name="lblAutoRotate.Text" xml:space="preserve">
    <value>Auto Rotate:</value>
  </data>
  <data name="lblAutoRotateDelay.Help" xml:space="preserve">
    <value>Delay in milliseconds between each rotation in auto-rotate mode. A minimum value of 1000 (i.e. one second) is recommended.</value>
  </data>
  <data name="lblAutoRotateDelay.Text" xml:space="preserve">
    <value>Auto Rotate Delay:</value>
  </data>
  <data name="lblMinScale.Help" xml:space="preserve">
    <value>The minimum scale appled to the furthest item. The item at the front has a scale of 1. To make items in the distance one quarter of the size, minScale would be 0.25.</value>
  </data>
  <data name="lblMinScale.Text" xml:space="preserve">
    <value>Min Scale:</value>
  </data>
  <data name="lblMouseWheel.Help" xml:space="preserve">
    <value>If set to true, this will enable mouse wheel support for the carousel.</value>
  </data>
  <data name="lblMouseWheel.Text" xml:space="preserve">
    <value>Mouse Wheel:</value>
  </data>
  <data name="lblReflectionGap.Help" xml:space="preserve">
    <value>Amount of vertical space in pixels between image and reflection, assuming applied to the item at the front. Gap will scale automatically.</value>
  </data>
  <data name="lblReflectionGap.Text" xml:space="preserve">
    <value>Reflection Gap:</value>
  </data>
  <data name="lblReflectionHeight.Help" xml:space="preserve">
    <value>Height of the auto-reflection in pixels, assuming applied to the item at the front. The reflection will scale automatically. A value of 0 means that no auto-reflection will appear.</value>
  </data>
  <data name="lblReflectionHeight.Text" xml:space="preserve">
    <value>Reflection Height:</value>
  </data>
  <data name="lblReflectionOpacity.Help" xml:space="preserve">
    <value>Specifies how transparent the reflection is. 0 is invisible, 1 is totally opaque.</value>
  </data>
  <data name="lblReflectionOpacity.Text" xml:space="preserve">
    <value>Reflection Opacity:</value>
  </data>
  <data name="lblSpeed.Help" xml:space="preserve">
    <value>This value represents the speed at which the carousel rotates between items. Good values are around 0.1 ~ 0.3. A value of one will instantly move from one item to the next without any rotation animation. Values should be greater than zero and less than one.</value>
  </data>
  <data name="lblSpeed.Text" xml:space="preserve">
    <value>Speed:</value>
  </data>
  <data name="lblxPosition.Help" xml:space="preserve">
    <value>Horizontal position of the circle centre relative to the container. You would normally set this to half the width of the container.</value>
  </data>
  <data name="lblxPosition.Text" xml:space="preserve">
    <value>x Position:</value>
  </data>
  <data name="lblxRadius.Help" xml:space="preserve">
    <value>Half-width of the circle that items travel around. 	Width of container / 2.3</value>
  </data>
  <data name="lblxRadius.Text" xml:space="preserve">
    <value>x Radius:</value>
  </data>
  <data name="lblyPosition.Help" xml:space="preserve">
    <value>Vertical position of the circle centre relative to the container. You would normally set this to around half the height of container.</value>
  </data>
  <data name="lblyPosition.Text" xml:space="preserve">
    <value>y Position:</value>
  </data>
  <data name="lblyRadius.Help" xml:space="preserve">
    <value>Half-height of the circle that items travel around. Height of container / 6</value>
  </data>
  <data name="lblyRadius.Text" xml:space="preserve">
    <value>y Radius:</value>
  </data>
  <data name="PositiveInteger.ErrorMessage" xml:space="preserve">
    <value>Positive integer is
required.</value>
  </data>
</root>