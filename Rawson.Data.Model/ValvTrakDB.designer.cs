#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rawson.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SRD")]
	public partial class ValvTrakDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClientContactPosition(Rawson.Data.Model.ClientContactPosition instance);
    partial void UpdateClientContactPosition(Rawson.Data.Model.ClientContactPosition instance);
    partial void DeleteClientContactPosition(Rawson.Data.Model.ClientContactPosition instance);
    partial void InsertClientContact(Rawson.Data.Model.ClientContact instance);
    partial void UpdateClientContact(Rawson.Data.Model.ClientContact instance);
    partial void DeleteClientContact(Rawson.Data.Model.ClientContact instance);
    partial void InsertClientLocationContact(Rawson.Data.Model.ClientLocationContact instance);
    partial void UpdateClientLocationContact(Rawson.Data.Model.ClientLocationContact instance);
    partial void DeleteClientLocationContact(Rawson.Data.Model.ClientLocationContact instance);
    partial void InsertClientLocation(Rawson.Data.Model.ClientLocation instance);
    partial void UpdateClientLocation(Rawson.Data.Model.ClientLocation instance);
    partial void DeleteClientLocation(Rawson.Data.Model.ClientLocation instance);
    partial void InsertClient(Rawson.Data.Model.Client instance);
    partial void UpdateClient(Rawson.Data.Model.Client instance);
    partial void DeleteClient(Rawson.Data.Model.Client instance);
    partial void InsertDeliveryMethod(Rawson.Data.Model.DeliveryMethod instance);
    partial void UpdateDeliveryMethod(Rawson.Data.Model.DeliveryMethod instance);
    partial void DeleteDeliveryMethod(Rawson.Data.Model.DeliveryMethod instance);
    partial void InsertGreasingRecordItem(Rawson.Data.Model.GreasingRecordItem instance);
    partial void UpdateGreasingRecordItem(Rawson.Data.Model.GreasingRecordItem instance);
    partial void DeleteGreasingRecordItem(Rawson.Data.Model.GreasingRecordItem instance);
    partial void InsertGreasingRecord(Rawson.Data.Model.GreasingRecord instance);
    partial void UpdateGreasingRecord(Rawson.Data.Model.GreasingRecord instance);
    partial void DeleteGreasingRecord(Rawson.Data.Model.GreasingRecord instance);
    partial void InsertJobAssignment(Rawson.Data.Model.JobAssignment instance);
    partial void UpdateJobAssignment(Rawson.Data.Model.JobAssignment instance);
    partial void DeleteJobAssignment(Rawson.Data.Model.JobAssignment instance);
    partial void InsertJobNote(Rawson.Data.Model.JobNote instance);
    partial void UpdateJobNote(Rawson.Data.Model.JobNote instance);
    partial void DeleteJobNote(Rawson.Data.Model.JobNote instance);
    partial void InsertJob(Rawson.Data.Model.Job instance);
    partial void UpdateJob(Rawson.Data.Model.Job instance);
    partial void DeleteJob(Rawson.Data.Model.Job instance);
    partial void InsertJobStatus(Rawson.Data.Model.JobStatus instance);
    partial void UpdateJobStatus(Rawson.Data.Model.JobStatus instance);
    partial void DeleteJobStatus(Rawson.Data.Model.JobStatus instance);
    partial void InsertJobType(Rawson.Data.Model.JobType instance);
    partial void UpdateJobType(Rawson.Data.Model.JobType instance);
    partial void DeleteJobType(Rawson.Data.Model.JobType instance);
    partial void InsertList(Rawson.Data.Model.List instance);
    partial void UpdateList(Rawson.Data.Model.List instance);
    partial void DeleteList(Rawson.Data.Model.List instance);
    partial void InsertManufacturerModel(Rawson.Data.Model.ManufacturerModel instance);
    partial void UpdateManufacturerModel(Rawson.Data.Model.ManufacturerModel instance);
    partial void DeleteManufacturerModel(Rawson.Data.Model.ManufacturerModel instance);
    partial void InsertManufacturer(Rawson.Data.Model.Manufacturer instance);
    partial void UpdateManufacturer(Rawson.Data.Model.Manufacturer instance);
    partial void DeleteManufacturer(Rawson.Data.Model.Manufacturer instance);
    partial void InsertServiceItemCategory(Rawson.Data.Model.ServiceItemCategory instance);
    partial void UpdateServiceItemCategory(Rawson.Data.Model.ServiceItemCategory instance);
    partial void DeleteServiceItemCategory(Rawson.Data.Model.ServiceItemCategory instance);
    partial void InsertServiceItem(Rawson.Data.Model.ServiceItem instance);
    partial void UpdateServiceItem(Rawson.Data.Model.ServiceItem instance);
    partial void DeleteServiceItem(Rawson.Data.Model.ServiceItem instance);
    partial void InsertServiceItemType(Rawson.Data.Model.ServiceItemType instance);
    partial void UpdateServiceItemType(Rawson.Data.Model.ServiceItemType instance);
    partial void DeleteServiceItemType(Rawson.Data.Model.ServiceItemType instance);
    partial void InsertServiceLocationType(Rawson.Data.Model.ServiceLocationType instance);
    partial void UpdateServiceLocationType(Rawson.Data.Model.ServiceLocationType instance);
    partial void DeleteServiceLocationType(Rawson.Data.Model.ServiceLocationType instance);
    partial void InsertTestResult(Rawson.Data.Model.TestResult instance);
    partial void UpdateTestResult(Rawson.Data.Model.TestResult instance);
    partial void DeleteTestResult(Rawson.Data.Model.TestResult instance);
    partial void InsertValveTest(Rawson.Data.Model.ValveTest instance);
    partial void UpdateValveTest(Rawson.Data.Model.ValveTest instance);
    partial void DeleteValveTest(Rawson.Data.Model.ValveTest instance);
    partial void InsertWellSafetyTest(Rawson.Data.Model.WellSafetyTest instance);
    partial void UpdateWellSafetyTest(Rawson.Data.Model.WellSafetyTest instance);
    partial void DeleteWellSafetyTest(Rawson.Data.Model.WellSafetyTest instance);
    partial void InsertEmployee(Rawson.Data.Model.Employee instance);
    partial void UpdateEmployee(Rawson.Data.Model.Employee instance);
    partial void DeleteEmployee(Rawson.Data.Model.Employee instance);
    partial void InsertChemicalPumpTest(Rawson.Data.Model.ChemicalPumpTest instance);
    partial void UpdateChemicalPumpTest(Rawson.Data.Model.ChemicalPumpTest instance);
    partial void DeleteChemicalPumpTest(Rawson.Data.Model.ChemicalPumpTest instance);
    #endregion
		
		public ValvTrakDBDataContext() : 
				base("Data Source=localhost;Initial Catalog=SRD;User ID=srd;Password=HOmLF1L8", mappingSource)
		{
			OnCreated();
		}
		
		public ValvTrakDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ValvTrakDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ValvTrakDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ValvTrakDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ClientContactPosition> ClientContactPositions
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ClientContactPosition>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ClientContact> ClientContacts
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ClientContact>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ClientLocationContact> ClientLocationContacts
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ClientLocationContact>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ClientLocation> ClientLocations
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ClientLocation>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.Client> Clients
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.Client>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.DeliveryMethod> DeliveryMethods
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.DeliveryMethod>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.GreasingRecordItem> GreasingRecordItems
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.GreasingRecordItem>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.GreasingRecord> GreasingRecords
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.GreasingRecord>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.JobAssignment> JobAssignments
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.JobAssignment>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.JobNote> JobNotes
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.JobNote>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.Job> Jobs
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.Job>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.JobStatus> JobStatus
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.JobStatus>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.JobType> JobTypes
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.JobType>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.List> Lists
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.List>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ManufacturerModel> ManufacturerModels
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ManufacturerModel>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.Manufacturer> Manufacturers
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.Manufacturer>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ServiceItemCategory> ServiceItemCategories
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ServiceItemCategory>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ServiceItem> ServiceItems
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ServiceItem>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ServiceItemType> ServiceItemTypes
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ServiceItemType>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ServiceLocationType> ServiceLocationTypes
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ServiceLocationType>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.TestResult> TestResults
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.TestResult>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ValveTest> ValveTests
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ValveTest>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.WellSafetyTest> WellSafetyTests
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.WellSafetyTest>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.Employee> Employees
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.Employee>();
			}
		}
		
		public System.Data.Linq.Table<Rawson.Data.Model.ChemicalPumpTest> ChemicalPumpTests
		{
			get
			{
				return this.GetTable<Rawson.Data.Model.ChemicalPumpTest>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ClientLocations_GetAll")]
		public ISingleResult<Rawson.Data.Model.ClientLocations_GetAllResult> ClientLocations_GetAll([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowSelectAll", DbType="Bit")] System.Nullable<bool> showSelectAll)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showSelectAll);
			return ((ISingleResult<Rawson.Data.Model.ClientLocations_GetAllResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ValveTest_Report")]
		public int ValveTest_Report([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ValveTestID", DbType="Int")] System.Nullable<int> valveTestID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="JobID", DbType="Int")] System.Nullable<int> jobID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientID", DbType="Int")] System.Nullable<int> clientID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationID", DbType="Int")] System.Nullable<int> locationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), valveTestID, jobID, clientID, locationID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ClientLocations_GetByClient")]
		public ISingleResult<Rawson.Data.Model.ClientLocations_GetByClientResult> ClientLocations_GetByClient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowSelectAll", DbType="Bit")] System.Nullable<bool> showSelectAll, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientID", DbType="Int")] System.Nullable<int> clientID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showSelectAll, clientID);
			return ((ISingleResult<Rawson.Data.Model.ClientLocations_GetByClientResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Clients_GetAll")]
		public ISingleResult<Rawson.Data.Model.Clients_GetAllResult> Clients_GetAll([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ShowSelectAll", DbType="Bit")] System.Nullable<bool> showSelectAll)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), showSelectAll);
			return ((ISingleResult<Rawson.Data.Model.Clients_GetAllResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CustomerAccounts_GetClientList")]
		public ISingleResult<Rawson.Data.Model.CustomerAccounts_GetClientListResult> CustomerAccounts_GetClientList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<Rawson.Data.Model.CustomerAccounts_GetClientListResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GreasingRecord_Report")]
		public ISingleResult<Rawson.Data.Model.GreasingRecord_ReportResult> GreasingRecord_Report([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GreasingRecordID", DbType="Int")] System.Nullable<int> greasingRecordID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="JobID", DbType="Int")] System.Nullable<int> jobID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientID", DbType="Int")] System.Nullable<int> clientID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocationID", DbType="Int")] System.Nullable<int> locationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), greasingRecordID, jobID, clientID, locationID);
			return ((ISingleResult<Rawson.Data.Model.GreasingRecord_ReportResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GreasingRecordItems_Report")]
		public int GreasingRecordItems_Report([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GreasingRecordID", DbType="Int")] System.Nullable<int> greasingRecordID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), greasingRecordID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.JobIDListByClientOrLocation")]
		public ISingleResult<Rawson.Data.Model.JobIDListByClientOrLocationResult> JobIDListByClientOrLocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientID", DbType="Int")] System.Nullable<int> clientID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ClientLocationID", DbType="Int")] System.Nullable<int> clientLocationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), clientID, clientLocationID);
			return ((ISingleResult<Rawson.Data.Model.JobIDListByClientOrLocationResult>)(result.ReturnValue));
		}
	}
}
namespace Rawson.Data.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientContactPositions")]
	public partial class ClientContactPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientContactPositionID;
		
		private string _ContactPosition;
		
		private EntitySet<ClientLocationContact> _ClientLocationContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientContactPositionIDChanging(int value);
    partial void OnClientContactPositionIDChanged();
    partial void OnContactPositionChanging(string value);
    partial void OnContactPositionChanged();
    #endregion
		
		public ClientContactPosition()
		{
			this._ClientLocationContacts = new EntitySet<ClientLocationContact>(new Action<ClientLocationContact>(this.attach_ClientLocationContacts), new Action<ClientLocationContact>(this.detach_ClientLocationContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientContactPositionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientContactPositionID
		{
			get
			{
				return this._ClientContactPositionID;
			}
			set
			{
				if ((this._ClientContactPositionID != value))
				{
					this.OnClientContactPositionIDChanging(value);
					this.SendPropertyChanging();
					this._ClientContactPositionID = value;
					this.SendPropertyChanged("ClientContactPositionID");
					this.OnClientContactPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPosition", DbType="VarChar(50)")]
		public string ContactPosition
		{
			get
			{
				return this._ContactPosition;
			}
			set
			{
				if ((this._ContactPosition != value))
				{
					this.OnContactPositionChanging(value);
					this.SendPropertyChanging();
					this._ContactPosition = value;
					this.SendPropertyChanged("ContactPosition");
					this.OnContactPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientContactPosition_ClientLocationContact", Storage="_ClientLocationContacts", ThisKey="ClientContactPositionID", OtherKey="ClientContactPositionID")]
		public EntitySet<ClientLocationContact> ClientLocationContacts
		{
			get
			{
				return this._ClientLocationContacts;
			}
			set
			{
				this._ClientLocationContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientLocationContacts(ClientLocationContact entity)
		{
			this.SendPropertyChanging();
			entity.ClientContactPosition = this;
		}
		
		private void detach_ClientLocationContacts(ClientLocationContact entity)
		{
			this.SendPropertyChanging();
			entity.ClientContactPosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientContacts")]
	public partial class ClientContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientContactID;
		
		private System.Nullable<int> _ClientID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _WorkPhone;
		
		private string _CellPhone;
		
		private string _Email;
		
		private bool _Active;
		
		private EntitySet<ClientLocationContact> _ClientLocationContacts;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientContactIDChanging(int value);
    partial void OnClientContactIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public ClientContact()
		{
			this._ClientLocationContacts = new EntitySet<ClientLocationContact>(new Action<ClientLocationContact>(this.attach_ClientLocationContacts), new Action<ClientLocationContact>(this.detach_ClientLocationContacts));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientContactID
		{
			get
			{
				return this._ClientContactID;
			}
			set
			{
				if ((this._ClientContactID != value))
				{
					this.OnClientContactIDChanging(value);
					this.SendPropertyChanging();
					this._ClientContactID = value;
					this.SendPropertyChanged("ClientContactID");
					this.OnClientContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(50)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(50)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientContact_ClientLocationContact", Storage="_ClientLocationContacts", ThisKey="ClientContactID", OtherKey="ClientContactID")]
		public EntitySet<ClientLocationContact> ClientLocationContacts
		{
			get
			{
				return this._ClientLocationContacts;
			}
			set
			{
				this._ClientLocationContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientContact", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientContacts.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientContacts.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientLocationContacts(ClientLocationContact entity)
		{
			this.SendPropertyChanging();
			entity.ClientContact = this;
		}
		
		private void detach_ClientLocationContacts(ClientLocationContact entity)
		{
			this.SendPropertyChanging();
			entity.ClientContact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientLocationContacts")]
	public partial class ClientLocationContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientLocationContactID;
		
		private System.Nullable<int> _ClientLocationID;
		
		private System.Nullable<int> _ClientContactID;
		
		private System.Nullable<int> _ClientContactPositionID;
		
		private EntityRef<ClientContactPosition> _ClientContactPosition;
		
		private EntityRef<ClientContact> _ClientContact;
		
		private EntityRef<ClientLocation> _ClientLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientLocationContactIDChanging(int value);
    partial void OnClientLocationContactIDChanged();
    partial void OnClientLocationIDChanging(System.Nullable<int> value);
    partial void OnClientLocationIDChanged();
    partial void OnClientContactIDChanging(System.Nullable<int> value);
    partial void OnClientContactIDChanged();
    partial void OnClientContactPositionIDChanging(System.Nullable<int> value);
    partial void OnClientContactPositionIDChanged();
    #endregion
		
		public ClientLocationContact()
		{
			this._ClientContactPosition = default(EntityRef<ClientContactPosition>);
			this._ClientContact = default(EntityRef<ClientContact>);
			this._ClientLocation = default(EntityRef<ClientLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationContactID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientLocationContactID
		{
			get
			{
				return this._ClientLocationContactID;
			}
			set
			{
				if ((this._ClientLocationContactID != value))
				{
					this.OnClientLocationContactIDChanging(value);
					this.SendPropertyChanging();
					this._ClientLocationContactID = value;
					this.SendPropertyChanged("ClientLocationContactID");
					this.OnClientLocationContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationID", DbType="Int")]
		public System.Nullable<int> ClientLocationID
		{
			get
			{
				return this._ClientLocationID;
			}
			set
			{
				if ((this._ClientLocationID != value))
				{
					if (this._ClientLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ClientLocationID = value;
					this.SendPropertyChanged("ClientLocationID");
					this.OnClientLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientContactID", DbType="Int")]
		public System.Nullable<int> ClientContactID
		{
			get
			{
				return this._ClientContactID;
			}
			set
			{
				if ((this._ClientContactID != value))
				{
					if (this._ClientContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientContactIDChanging(value);
					this.SendPropertyChanging();
					this._ClientContactID = value;
					this.SendPropertyChanged("ClientContactID");
					this.OnClientContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientContactPositionID", DbType="Int")]
		public System.Nullable<int> ClientContactPositionID
		{
			get
			{
				return this._ClientContactPositionID;
			}
			set
			{
				if ((this._ClientContactPositionID != value))
				{
					if (this._ClientContactPosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientContactPositionIDChanging(value);
					this.SendPropertyChanging();
					this._ClientContactPositionID = value;
					this.SendPropertyChanged("ClientContactPositionID");
					this.OnClientContactPositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientContactPosition_ClientLocationContact", Storage="_ClientContactPosition", ThisKey="ClientContactPositionID", OtherKey="ClientContactPositionID", IsForeignKey=true)]
		public ClientContactPosition ClientContactPosition
		{
			get
			{
				return this._ClientContactPosition.Entity;
			}
			set
			{
				ClientContactPosition previousValue = this._ClientContactPosition.Entity;
				if (((previousValue != value) 
							|| (this._ClientContactPosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientContactPosition.Entity = null;
						previousValue.ClientLocationContacts.Remove(this);
					}
					this._ClientContactPosition.Entity = value;
					if ((value != null))
					{
						value.ClientLocationContacts.Add(this);
						this._ClientContactPositionID = value.ClientContactPositionID;
					}
					else
					{
						this._ClientContactPositionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientContactPosition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientContact_ClientLocationContact", Storage="_ClientContact", ThisKey="ClientContactID", OtherKey="ClientContactID", IsForeignKey=true)]
		public ClientContact ClientContact
		{
			get
			{
				return this._ClientContact.Entity;
			}
			set
			{
				ClientContact previousValue = this._ClientContact.Entity;
				if (((previousValue != value) 
							|| (this._ClientContact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientContact.Entity = null;
						previousValue.ClientLocationContacts.Remove(this);
					}
					this._ClientContact.Entity = value;
					if ((value != null))
					{
						value.ClientLocationContacts.Add(this);
						this._ClientContactID = value.ClientContactID;
					}
					else
					{
						this._ClientContactID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientContact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientLocation_ClientLocationContact", Storage="_ClientLocation", ThisKey="ClientLocationID", OtherKey="ClientLocationID", IsForeignKey=true)]
		public ClientLocation ClientLocation
		{
			get
			{
				return this._ClientLocation.Entity;
			}
			set
			{
				ClientLocation previousValue = this._ClientLocation.Entity;
				if (((previousValue != value) 
							|| (this._ClientLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientLocation.Entity = null;
						previousValue.ClientLocationContacts.Remove(this);
					}
					this._ClientLocation.Entity = value;
					if ((value != null))
					{
						value.ClientLocationContacts.Add(this);
						this._ClientLocationID = value.ClientLocationID;
					}
					else
					{
						this._ClientLocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientLocations")]
	public partial class ClientLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientLocationID;
		
		private System.Nullable<int> _ClientID;
		
		private System.Nullable<int> _ClientLocationTypeID;
		
		private string _PropertyNumber;
		
		private string _Name;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Longitude;
		
		private string _Latitude;
		
		private System.Nullable<System.DateTime> _ServiceDate;
		
		private bool _Active;
		
		private System.DateTime _CreationDate;
		
		private byte[] _Version;
		
		private EntitySet<ClientLocationContact> _ClientLocationContacts;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<ServiceItem> _ServiceItems;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientLocationIDChanging(int value);
    partial void OnClientLocationIDChanged();
    partial void OnClientIDChanging(System.Nullable<int> value);
    partial void OnClientIDChanged();
    partial void OnClientLocationTypeIDChanging(System.Nullable<int> value);
    partial void OnClientLocationTypeIDChanged();
    partial void OnPropertyNumberChanging(string value);
    partial void OnPropertyNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnServiceDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public ClientLocation()
		{
			this._ClientLocationContacts = new EntitySet<ClientLocationContact>(new Action<ClientLocationContact>(this.attach_ClientLocationContacts), new Action<ClientLocationContact>(this.detach_ClientLocationContacts));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._ServiceItems = new EntitySet<ServiceItem>(new Action<ServiceItem>(this.attach_ServiceItems), new Action<ServiceItem>(this.detach_ServiceItems));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientLocationID
		{
			get
			{
				return this._ClientLocationID;
			}
			set
			{
				if ((this._ClientLocationID != value))
				{
					this.OnClientLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ClientLocationID = value;
					this.SendPropertyChanged("ClientLocationID");
					this.OnClientLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationTypeID", DbType="Int")]
		public System.Nullable<int> ClientLocationTypeID
		{
			get
			{
				return this._ClientLocationTypeID;
			}
			set
			{
				if ((this._ClientLocationTypeID != value))
				{
					this.OnClientLocationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ClientLocationTypeID = value;
					this.SendPropertyChanged("ClientLocationTypeID");
					this.OnClientLocationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNumber", DbType="VarChar(50)")]
		public string PropertyNumber
		{
			get
			{
				return this._PropertyNumber;
			}
			set
			{
				if ((this._PropertyNumber != value))
				{
					this.OnPropertyNumberChanging(value);
					this.SendPropertyChanging();
					this._PropertyNumber = value;
					this.SendPropertyChanged("PropertyNumber");
					this.OnPropertyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(50)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="VarChar(50)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="VarChar(50)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ServiceDate
		{
			get
			{
				return this._ServiceDate;
			}
			set
			{
				if ((this._ServiceDate != value))
				{
					this.OnServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ServiceDate = value;
					this.SendPropertyChanged("ServiceDate");
					this.OnServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientLocation_ClientLocationContact", Storage="_ClientLocationContacts", ThisKey="ClientLocationID", OtherKey="ClientLocationID")]
		public EntitySet<ClientLocationContact> ClientLocationContacts
		{
			get
			{
				return this._ClientLocationContacts;
			}
			set
			{
				this._ClientLocationContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientLocation_Job", Storage="_Jobs", ThisKey="ClientLocationID", OtherKey="ClientLocationID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientLocation_ServiceItem", Storage="_ServiceItems", ThisKey="ClientLocationID", OtherKey="ClientLocationID")]
		public EntitySet<ServiceItem> ServiceItems
		{
			get
			{
				return this._ServiceItems;
			}
			set
			{
				this._ServiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientLocation", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.ClientLocations.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.ClientLocations.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientLocationContacts(ClientLocationContact entity)
		{
			this.SendPropertyChanging();
			entity.ClientLocation = this;
		}
		
		private void detach_ClientLocationContacts(ClientLocationContact entity)
		{
			this.SendPropertyChanging();
			entity.ClientLocation = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.ClientLocation = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.ClientLocation = null;
		}
		
		private void attach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.ClientLocation = this;
		}
		
		private void detach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.ClientLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _Name;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Phone;
		
		private string _Website;
		
		private bool _Active;
		
		private string _SysProNumber;
		
		private int _ParentID;
		
		private byte[] _Version;
		
		private EntitySet<ClientContact> _ClientContacts;
		
		private EntitySet<ClientLocation> _ClientLocations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnSysProNumberChanging(string value);
    partial void OnSysProNumberChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public Client()
		{
			this._ClientContacts = new EntitySet<ClientContact>(new Action<ClientContact>(this.attach_ClientContacts), new Action<ClientContact>(this.detach_ClientContacts));
			this._ClientLocations = new EntitySet<ClientLocation>(new Action<ClientLocation>(this.attach_ClientLocations), new Action<ClientLocation>(this.detach_ClientLocations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(15)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(50)")]
		public string Website
		{
			get
			{
				return this._Website;
			}
			set
			{
				if ((this._Website != value))
				{
					this.OnWebsiteChanging(value);
					this.SendPropertyChanging();
					this._Website = value;
					this.SendPropertyChanged("Website");
					this.OnWebsiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysProNumber", DbType="VarChar(50)")]
		public string SysProNumber
		{
			get
			{
				return this._SysProNumber;
			}
			set
			{
				if ((this._SysProNumber != value))
				{
					this.OnSysProNumberChanging(value);
					this.SendPropertyChanging();
					this._SysProNumber = value;
					this.SendPropertyChanged("SysProNumber");
					this.OnSysProNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientContact", Storage="_ClientContacts", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<ClientContact> ClientContacts
		{
			get
			{
				return this._ClientContacts;
			}
			set
			{
				this._ClientContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_ClientLocation", Storage="_ClientLocations", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<ClientLocation> ClientLocations
		{
			get
			{
				return this._ClientLocations;
			}
			set
			{
				this._ClientLocations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientContacts(ClientContact entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientContacts(ClientContact entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_ClientLocations(ClientLocation entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_ClientLocations(ClientLocation entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryMethods")]
	public partial class DeliveryMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DeliveryMethodID;
		
		private string _Method;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDeliveryMethodIDChanging(int value);
    partial void OnDeliveryMethodIDChanged();
    partial void OnMethodChanging(string value);
    partial void OnMethodChanged();
    #endregion
		
		public DeliveryMethod()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DeliveryMethodID
		{
			get
			{
				return this._DeliveryMethodID;
			}
			set
			{
				if ((this._DeliveryMethodID != value))
				{
					this.OnDeliveryMethodIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryMethodID = value;
					this.SendPropertyChanged("DeliveryMethodID");
					this.OnDeliveryMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryMethod_Job", Storage="_Jobs", ThisKey="DeliveryMethodID", OtherKey="DeliveryMethodID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryMethod = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GreasingRecordItems")]
	public partial class GreasingRecordItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GreasingRecordItemID;
		
		private int _GreasingRecordID;
		
		private int _ServiceItemID;
		
		private string _ValveLocation;
		
		private System.Nullable<int> _ActuatorInspected;
		
		private System.Nullable<int> _ActuatorLubed;
		
		private System.Nullable<int> _PercentCycled;
		
		private System.Nullable<int> _ValveSecured;
		
		private System.Nullable<char> _FlangeOrScrew;
		
		private System.Nullable<int> _EaseOfOperation;
		
		private System.Nullable<int> _SeatsChecked;
		
		private System.Nullable<int> _SeatsLubed;
		
		private System.Nullable<int> _Leaking;
		
		private System.Nullable<int> _LubeTypeID;
		
		private float _AmountInjected;
		
		private string _Notes;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private byte[] _Version;
		
		private EntityRef<GreasingRecord> _GreasingRecord;
		
		private EntityRef<ServiceItem> _ServiceItem;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGreasingRecordItemIDChanging(int value);
    partial void OnGreasingRecordItemIDChanged();
    partial void OnGreasingRecordIDChanging(int value);
    partial void OnGreasingRecordIDChanged();
    partial void OnServiceItemIDChanging(int value);
    partial void OnServiceItemIDChanged();
    partial void OnValveLocationChanging(string value);
    partial void OnValveLocationChanged();
    partial void OnActuatorInspectedChanging(System.Nullable<int> value);
    partial void OnActuatorInspectedChanged();
    partial void OnActuatorLubedChanging(System.Nullable<int> value);
    partial void OnActuatorLubedChanged();
    partial void OnPercentCycledChanging(System.Nullable<int> value);
    partial void OnPercentCycledChanged();
    partial void OnValveSecuredChanging(System.Nullable<int> value);
    partial void OnValveSecuredChanged();
    partial void OnFlangeOrScrewChanging(System.Nullable<char> value);
    partial void OnFlangeOrScrewChanged();
    partial void OnEaseOfOperationChanging(System.Nullable<int> value);
    partial void OnEaseOfOperationChanged();
    partial void OnSeatsCheckedChanging(System.Nullable<int> value);
    partial void OnSeatsCheckedChanged();
    partial void OnSeatsLubedChanging(System.Nullable<int> value);
    partial void OnSeatsLubedChanged();
    partial void OnLeakingChanging(System.Nullable<int> value);
    partial void OnLeakingChanged();
    partial void OnLubeTypeIDChanging(System.Nullable<int> value);
    partial void OnLubeTypeIDChanged();
    partial void OnAmountInjectedChanging(float value);
    partial void OnAmountInjectedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public GreasingRecordItem()
		{
			this._GreasingRecord = default(EntityRef<GreasingRecord>);
			this._ServiceItem = default(EntityRef<ServiceItem>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreasingRecordItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GreasingRecordItemID
		{
			get
			{
				return this._GreasingRecordItemID;
			}
			set
			{
				if ((this._GreasingRecordItemID != value))
				{
					this.OnGreasingRecordItemIDChanging(value);
					this.SendPropertyChanging();
					this._GreasingRecordItemID = value;
					this.SendPropertyChanged("GreasingRecordItemID");
					this.OnGreasingRecordItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreasingRecordID", DbType="Int NOT NULL")]
		public int GreasingRecordID
		{
			get
			{
				return this._GreasingRecordID;
			}
			set
			{
				if ((this._GreasingRecordID != value))
				{
					if (this._GreasingRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGreasingRecordIDChanging(value);
					this.SendPropertyChanging();
					this._GreasingRecordID = value;
					this.SendPropertyChanged("GreasingRecordID");
					this.OnGreasingRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemID", DbType="Int NOT NULL")]
		public int ServiceItemID
		{
			get
			{
				return this._ServiceItemID;
			}
			set
			{
				if ((this._ServiceItemID != value))
				{
					if (this._ServiceItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceItemIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemID = value;
					this.SendPropertyChanged("ServiceItemID");
					this.OnServiceItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValveLocation", DbType="VarChar(50)")]
		public string ValveLocation
		{
			get
			{
				return this._ValveLocation;
			}
			set
			{
				if ((this._ValveLocation != value))
				{
					this.OnValveLocationChanging(value);
					this.SendPropertyChanging();
					this._ValveLocation = value;
					this.SendPropertyChanged("ValveLocation");
					this.OnValveLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActuatorInspected", DbType="Int")]
		public System.Nullable<int> ActuatorInspected
		{
			get
			{
				return this._ActuatorInspected;
			}
			set
			{
				if ((this._ActuatorInspected != value))
				{
					this.OnActuatorInspectedChanging(value);
					this.SendPropertyChanging();
					this._ActuatorInspected = value;
					this.SendPropertyChanged("ActuatorInspected");
					this.OnActuatorInspectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActuatorLubed", DbType="Int")]
		public System.Nullable<int> ActuatorLubed
		{
			get
			{
				return this._ActuatorLubed;
			}
			set
			{
				if ((this._ActuatorLubed != value))
				{
					this.OnActuatorLubedChanging(value);
					this.SendPropertyChanging();
					this._ActuatorLubed = value;
					this.SendPropertyChanged("ActuatorLubed");
					this.OnActuatorLubedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentCycled", DbType="Int")]
		public System.Nullable<int> PercentCycled
		{
			get
			{
				return this._PercentCycled;
			}
			set
			{
				if ((this._PercentCycled != value))
				{
					this.OnPercentCycledChanging(value);
					this.SendPropertyChanging();
					this._PercentCycled = value;
					this.SendPropertyChanged("PercentCycled");
					this.OnPercentCycledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValveSecured", DbType="Int")]
		public System.Nullable<int> ValveSecured
		{
			get
			{
				return this._ValveSecured;
			}
			set
			{
				if ((this._ValveSecured != value))
				{
					this.OnValveSecuredChanging(value);
					this.SendPropertyChanging();
					this._ValveSecured = value;
					this.SendPropertyChanged("ValveSecured");
					this.OnValveSecuredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlangeOrScrew", DbType="Char(1)")]
		public System.Nullable<char> FlangeOrScrew
		{
			get
			{
				return this._FlangeOrScrew;
			}
			set
			{
				if ((this._FlangeOrScrew != value))
				{
					this.OnFlangeOrScrewChanging(value);
					this.SendPropertyChanging();
					this._FlangeOrScrew = value;
					this.SendPropertyChanged("FlangeOrScrew");
					this.OnFlangeOrScrewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EaseOfOperation", DbType="Int")]
		public System.Nullable<int> EaseOfOperation
		{
			get
			{
				return this._EaseOfOperation;
			}
			set
			{
				if ((this._EaseOfOperation != value))
				{
					this.OnEaseOfOperationChanging(value);
					this.SendPropertyChanging();
					this._EaseOfOperation = value;
					this.SendPropertyChanged("EaseOfOperation");
					this.OnEaseOfOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatsChecked", DbType="Int")]
		public System.Nullable<int> SeatsChecked
		{
			get
			{
				return this._SeatsChecked;
			}
			set
			{
				if ((this._SeatsChecked != value))
				{
					this.OnSeatsCheckedChanging(value);
					this.SendPropertyChanging();
					this._SeatsChecked = value;
					this.SendPropertyChanged("SeatsChecked");
					this.OnSeatsCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatsLubed", DbType="Int")]
		public System.Nullable<int> SeatsLubed
		{
			get
			{
				return this._SeatsLubed;
			}
			set
			{
				if ((this._SeatsLubed != value))
				{
					this.OnSeatsLubedChanging(value);
					this.SendPropertyChanging();
					this._SeatsLubed = value;
					this.SendPropertyChanged("SeatsLubed");
					this.OnSeatsLubedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leaking", DbType="Int")]
		public System.Nullable<int> Leaking
		{
			get
			{
				return this._Leaking;
			}
			set
			{
				if ((this._Leaking != value))
				{
					this.OnLeakingChanging(value);
					this.SendPropertyChanging();
					this._Leaking = value;
					this.SendPropertyChanged("Leaking");
					this.OnLeakingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LubeTypeID", DbType="Int")]
		public System.Nullable<int> LubeTypeID
		{
			get
			{
				return this._LubeTypeID;
			}
			set
			{
				if ((this._LubeTypeID != value))
				{
					this.OnLubeTypeIDChanging(value);
					this.SendPropertyChanging();
					this._LubeTypeID = value;
					this.SendPropertyChanged("LubeTypeID");
					this.OnLubeTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountInjected", DbType="Float")]
		public float AmountInjected
		{
			get
			{
				return this._AmountInjected;
			}
			set
			{
				if ((this._AmountInjected != value))
				{
					this.OnAmountInjectedChanging(value);
					this.SendPropertyChanging();
					this._AmountInjected = value;
					this.SendPropertyChanged("AmountInjected");
					this.OnAmountInjectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(200)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GreasingRecord_GreasingRecordItem", Storage="_GreasingRecord", ThisKey="GreasingRecordID", OtherKey="GreasingRecordID", IsForeignKey=true)]
		public GreasingRecord GreasingRecord
		{
			get
			{
				return this._GreasingRecord.Entity;
			}
			set
			{
				GreasingRecord previousValue = this._GreasingRecord.Entity;
				if (((previousValue != value) 
							|| (this._GreasingRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GreasingRecord.Entity = null;
						previousValue.GreasingRecordItems.Remove(this);
					}
					this._GreasingRecord.Entity = value;
					if ((value != null))
					{
						value.GreasingRecordItems.Add(this);
						this._GreasingRecordID = value.GreasingRecordID;
					}
					else
					{
						this._GreasingRecordID = default(int);
					}
					this.SendPropertyChanged("GreasingRecord");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_GreasingRecordItem", Storage="_ServiceItem", ThisKey="ServiceItemID", OtherKey="ServiceItemID", IsForeignKey=true)]
		public ServiceItem ServiceItem
		{
			get
			{
				return this._ServiceItem.Entity;
			}
			set
			{
				ServiceItem previousValue = this._ServiceItem.Entity;
				if (((previousValue != value) 
							|| (this._ServiceItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceItem.Entity = null;
						previousValue.GreasingRecordItems.Remove(this);
					}
					this._ServiceItem.Entity = value;
					if ((value != null))
					{
						value.GreasingRecordItems.Add(this);
						this._ServiceItemID = value.ServiceItemID;
					}
					else
					{
						this._ServiceItemID = default(int);
					}
					this.SendPropertyChanged("ServiceItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GreasingRecordItem", Storage="_Employee", ThisKey="ModifiedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.GreasingRecordItems.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.GreasingRecordItems.Add(this);
						this._ModifiedBy = value.EmployeeID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GreasingRecords")]
	public partial class GreasingRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GreasingRecordID;
		
		private int _JobID;
		
		private string _ClientFieldOffice;
		
		private string _PipelineSegment;
		
		private string _Field;
		
		private string _SapEquipNum;
		
		private string _FSRNum;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private byte[] _Version;
		
		private EntitySet<GreasingRecordItem> _GreasingRecordItems;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGreasingRecordIDChanging(int value);
    partial void OnGreasingRecordIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnClientFieldOfficeChanging(string value);
    partial void OnClientFieldOfficeChanged();
    partial void OnPipelineSegmentChanging(string value);
    partial void OnPipelineSegmentChanged();
    partial void OnFieldChanging(string value);
    partial void OnFieldChanged();
    partial void OnSapPSVChanging(string value);
    partial void OnSapPSVChanged();
    partial void OnFSRNumChanging(string value);
    partial void OnFSRNumChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public GreasingRecord()
		{
			this._GreasingRecordItems = new EntitySet<GreasingRecordItem>(new Action<GreasingRecordItem>(this.attach_GreasingRecordItems), new Action<GreasingRecordItem>(this.detach_GreasingRecordItems));
			this._Job = default(EntityRef<Job>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreasingRecordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GreasingRecordID
		{
			get
			{
				return this._GreasingRecordID;
			}
			set
			{
				if ((this._GreasingRecordID != value))
				{
					this.OnGreasingRecordIDChanging(value);
					this.SendPropertyChanging();
					this._GreasingRecordID = value;
					this.SendPropertyChanged("GreasingRecordID");
					this.OnGreasingRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientFieldOffice", DbType="VarChar(50)")]
		public string ClientFieldOffice
		{
			get
			{
				return this._ClientFieldOffice;
			}
			set
			{
				if ((this._ClientFieldOffice != value))
				{
					this.OnClientFieldOfficeChanging(value);
					this.SendPropertyChanging();
					this._ClientFieldOffice = value;
					this.SendPropertyChanged("ClientFieldOffice");
					this.OnClientFieldOfficeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PipelineSegment", DbType="VarChar(100)")]
		public string PipelineSegment
		{
			get
			{
				return this._PipelineSegment;
			}
			set
			{
				if ((this._PipelineSegment != value))
				{
					this.OnPipelineSegmentChanging(value);
					this.SendPropertyChanging();
					this._PipelineSegment = value;
					this.SendPropertyChanged("PipelineSegment");
					this.OnPipelineSegmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field", DbType="VarChar(50)")]
		public string Field
		{
			get
			{
				return this._Field;
			}
			set
			{
				if ((this._Field != value))
				{
					this.OnFieldChanging(value);
					this.SendPropertyChanging();
					this._Field = value;
					this.SendPropertyChanged("Field");
					this.OnFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapEquipNum", DbType="VarChar(50)")]
		public string SapPSV
		{
			get
			{
				return this._SapEquipNum;
			}
			set
			{
				if ((this._SapEquipNum != value))
				{
					this.OnSapPSVChanging(value);
					this.SendPropertyChanging();
					this._SapEquipNum = value;
					this.SendPropertyChanged("SapPSV");
					this.OnSapPSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSRNum", DbType="VarChar(50)")]
		public string FSRNum
		{
			get
			{
				return this._FSRNum;
			}
			set
			{
				if ((this._FSRNum != value))
				{
					this.OnFSRNumChanging(value);
					this.SendPropertyChanging();
					this._FSRNum = value;
					this.SendPropertyChanged("FSRNum");
					this.OnFSRNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GreasingRecord_GreasingRecordItem", Storage="_GreasingRecordItems", ThisKey="GreasingRecordID", OtherKey="GreasingRecordID")]
		public EntitySet<GreasingRecordItem> GreasingRecordItems
		{
			get
			{
				return this._GreasingRecordItems;
			}
			set
			{
				this._GreasingRecordItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_GreasingRecord", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.GreasingRecords.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.GreasingRecords.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GreasingRecord", Storage="_Employee", ThisKey="CreatedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.GreasingRecords.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.GreasingRecords.Add(this);
						this._CreatedBy = value.EmployeeID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GreasingRecord1", Storage="_Employee1", ThisKey="ModifiedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.GreasingRecords1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.GreasingRecords1.Add(this);
						this._ModifiedBy = value.EmployeeID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GreasingRecordItems(GreasingRecordItem entity)
		{
			this.SendPropertyChanging();
			entity.GreasingRecord = this;
		}
		
		private void detach_GreasingRecordItems(GreasingRecordItem entity)
		{
			this.SendPropertyChanging();
			entity.GreasingRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobAssignments")]
	public partial class JobAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobAssignmentID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _JobID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobAssignmentIDChanging(int value);
    partial void OnJobAssignmentIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnJobIDChanging(System.Nullable<int> value);
    partial void OnJobIDChanged();
    #endregion
		
		public JobAssignment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobAssignmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobAssignmentID
		{
			get
			{
				return this._JobAssignmentID;
			}
			set
			{
				if ((this._JobAssignmentID != value))
				{
					this.OnJobAssignmentIDChanging(value);
					this.SendPropertyChanging();
					this._JobAssignmentID = value;
					this.SendPropertyChanged("JobAssignmentID");
					this.OnJobAssignmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int")]
		public System.Nullable<int> JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobNotes")]
	public partial class JobNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobNotesID;
		
		private System.Nullable<int> _JobID;
		
		private System.Nullable<int> _EmployeeID;
		
		private string _Notes;
		
		private System.Nullable<System.DateTime> _CreationDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobNotesIDChanging(int value);
    partial void OnJobNotesIDChanged();
    partial void OnJobIDChanging(System.Nullable<int> value);
    partial void OnJobIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreationDateChanged();
    #endregion
		
		public JobNote()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobNotesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobNotesID
		{
			get
			{
				return this._JobNotesID;
			}
			set
			{
				if ((this._JobNotesID != value))
				{
					this.OnJobNotesIDChanging(value);
					this.SendPropertyChanging();
					this._JobNotesID = value;
					this.SendPropertyChanged("JobNotesID");
					this.OnJobNotesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int")]
		public System.Nullable<int> JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2000)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobID;
		
		private string _SalesOrderNum;
		
		private string _SapWoNum;
		
		private System.Nullable<System.DateTime> _CallDate;
		
		private System.Nullable<int> _RequestedByID;
		
		private int _JobTypeID;
		
		private int _ClientLocationID;
		
		private int _JobStatusID;
		
		private System.Nullable<System.DateTime> _ServiceDate;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private int _AssignedByID;
		
		private System.Nullable<int> _AssignedToID;
		
		private System.Nullable<int> _ApprovedByID;
		
		private System.Nullable<int> _DeliveryMethodID;
		
		private System.Nullable<decimal> _PM;
		
		private System.Nullable<decimal> _NP;
		
		private System.Nullable<decimal> _FS;
		
		private bool _Active;
		
		private string _DotNumber;
		
		private string _VRstamp;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private byte[] _Version;
		
		private EntitySet<GreasingRecord> _GreasingRecords;
		
		private EntitySet<ValveTest> _ValveTests;
		
		private EntitySet<WellSafetyTest> _WellSafetyTests;
		
		private EntitySet<ChemicalPumpTest> _ChemicalPumpTests;
		
		private EntityRef<ClientLocation> _ClientLocation;
		
		private EntityRef<DeliveryMethod> _DeliveryMethod;
		
		private EntityRef<JobStatus> _JobStatus;
		
		private EntityRef<JobType> _JobType;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Employee> _Employee2;
		
		private EntityRef<Employee> _Employee3;
		
		private EntityRef<Employee> _Employee4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnSalesOrderNumChanging(string value);
    partial void OnSalesOrderNumChanged();
    partial void OnSapWoNumChanging(string value);
    partial void OnSapWoNumChanged();
    partial void OnCallDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCallDateChanged();
    partial void OnRequestedByIDChanging(System.Nullable<int> value);
    partial void OnRequestedByIDChanged();
    partial void OnJobTypeIDChanging(int value);
    partial void OnJobTypeIDChanged();
    partial void OnClientLocationIDChanging(int value);
    partial void OnClientLocationIDChanged();
    partial void OnJobStatusIDChanging(int value);
    partial void OnJobStatusIDChanged();
    partial void OnServiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnServiceDateChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    partial void OnAssignedByIDChanging(int value);
    partial void OnAssignedByIDChanged();
    partial void OnAssignedToIDChanging(System.Nullable<int> value);
    partial void OnAssignedToIDChanged();
    partial void OnApprovedByIDChanging(System.Nullable<int> value);
    partial void OnApprovedByIDChanged();
    partial void OnDeliveryMethodIDChanging(System.Nullable<int> value);
    partial void OnDeliveryMethodIDChanged();
    partial void OnPMChanging(System.Nullable<decimal> value);
    partial void OnPMChanged();
    partial void OnNPChanging(System.Nullable<decimal> value);
    partial void OnNPChanged();
    partial void OnFSChanging(System.Nullable<decimal> value);
    partial void OnFSChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDotNumberChanging(string value);
    partial void OnDotNumberChanged();
    partial void OnVRstampChanging(string value);
    partial void OnVRstampChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public Job()
		{
			this._GreasingRecords = new EntitySet<GreasingRecord>(new Action<GreasingRecord>(this.attach_GreasingRecords), new Action<GreasingRecord>(this.detach_GreasingRecords));
			this._ValveTests = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests), new Action<ValveTest>(this.detach_ValveTests));
			this._WellSafetyTests = new EntitySet<WellSafetyTest>(new Action<WellSafetyTest>(this.attach_WellSafetyTests), new Action<WellSafetyTest>(this.detach_WellSafetyTests));
			this._ChemicalPumpTests = new EntitySet<ChemicalPumpTest>(new Action<ChemicalPumpTest>(this.attach_ChemicalPumpTests), new Action<ChemicalPumpTest>(this.detach_ChemicalPumpTests));
			this._ClientLocation = default(EntityRef<ClientLocation>);
			this._DeliveryMethod = default(EntityRef<DeliveryMethod>);
			this._JobStatus = default(EntityRef<JobStatus>);
			this._JobType = default(EntityRef<JobType>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Employee2 = default(EntityRef<Employee>);
			this._Employee3 = default(EntityRef<Employee>);
			this._Employee4 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderNum", DbType="VarChar(50)")]
		public string SalesOrderNum
		{
			get
			{
				return this._SalesOrderNum;
			}
			set
			{
				if ((this._SalesOrderNum != value))
				{
					this.OnSalesOrderNumChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderNum = value;
					this.SendPropertyChanged("SalesOrderNum");
					this.OnSalesOrderNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapWoNum", DbType="VarChar(50)")]
		public string SapWoNum
		{
			get
			{
				return this._SapWoNum;
			}
			set
			{
				if ((this._SapWoNum != value))
				{
					this.OnSapWoNumChanging(value);
					this.SendPropertyChanging();
					this._SapWoNum = value;
					this.SendPropertyChanged("SapWoNum");
					this.OnSapWoNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CallDate
		{
			get
			{
				return this._CallDate;
			}
			set
			{
				if ((this._CallDate != value))
				{
					this.OnCallDateChanging(value);
					this.SendPropertyChanging();
					this._CallDate = value;
					this.SendPropertyChanged("CallDate");
					this.OnCallDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestedByID", DbType="Int")]
		public System.Nullable<int> RequestedByID
		{
			get
			{
				return this._RequestedByID;
			}
			set
			{
				if ((this._RequestedByID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestedByIDChanging(value);
					this.SendPropertyChanging();
					this._RequestedByID = value;
					this.SendPropertyChanged("RequestedByID");
					this.OnRequestedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTypeID", DbType="Int NOT NULL")]
		public int JobTypeID
		{
			get
			{
				return this._JobTypeID;
			}
			set
			{
				if ((this._JobTypeID != value))
				{
					if (this._JobType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobTypeIDChanging(value);
					this.SendPropertyChanging();
					this._JobTypeID = value;
					this.SendPropertyChanged("JobTypeID");
					this.OnJobTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationID", DbType="Int NOT NULL")]
		public int ClientLocationID
		{
			get
			{
				return this._ClientLocationID;
			}
			set
			{
				if ((this._ClientLocationID != value))
				{
					if (this._ClientLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ClientLocationID = value;
					this.SendPropertyChanged("ClientLocationID");
					this.OnClientLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusID", DbType="Int NOT NULL")]
		public int JobStatusID
		{
			get
			{
				return this._JobStatusID;
			}
			set
			{
				if ((this._JobStatusID != value))
				{
					if (this._JobStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobStatusIDChanging(value);
					this.SendPropertyChanging();
					this._JobStatusID = value;
					this.SendPropertyChanged("JobStatusID");
					this.OnJobStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ServiceDate
		{
			get
			{
				return this._ServiceDate;
			}
			set
			{
				if ((this._ServiceDate != value))
				{
					this.OnServiceDateChanging(value);
					this.SendPropertyChanging();
					this._ServiceDate = value;
					this.SendPropertyChanged("ServiceDate");
					this.OnServiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedByID", DbType="Int NOT NULL")]
		public int AssignedByID
		{
			get
			{
				return this._AssignedByID;
			}
			set
			{
				if ((this._AssignedByID != value))
				{
					if (this._Employee2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedByIDChanging(value);
					this.SendPropertyChanging();
					this._AssignedByID = value;
					this.SendPropertyChanged("AssignedByID");
					this.OnAssignedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedToID", DbType="Int")]
		public System.Nullable<int> AssignedToID
		{
			get
			{
				return this._AssignedToID;
			}
			set
			{
				if ((this._AssignedToID != value))
				{
					if (this._Employee3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedToIDChanging(value);
					this.SendPropertyChanging();
					this._AssignedToID = value;
					this.SendPropertyChanged("AssignedToID");
					this.OnAssignedToIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedByID", DbType="Int")]
		public System.Nullable<int> ApprovedByID
		{
			get
			{
				return this._ApprovedByID;
			}
			set
			{
				if ((this._ApprovedByID != value))
				{
					if (this._Employee4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApprovedByIDChanging(value);
					this.SendPropertyChanging();
					this._ApprovedByID = value;
					this.SendPropertyChanged("ApprovedByID");
					this.OnApprovedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryMethodID", DbType="Int")]
		public System.Nullable<int> DeliveryMethodID
		{
			get
			{
				return this._DeliveryMethodID;
			}
			set
			{
				if ((this._DeliveryMethodID != value))
				{
					if (this._DeliveryMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliveryMethodIDChanging(value);
					this.SendPropertyChanging();
					this._DeliveryMethodID = value;
					this.SendPropertyChanged("DeliveryMethodID");
					this.OnDeliveryMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PM", DbType="SmallMoney")]
		public System.Nullable<decimal> PM
		{
			get
			{
				return this._PM;
			}
			set
			{
				if ((this._PM != value))
				{
					this.OnPMChanging(value);
					this.SendPropertyChanging();
					this._PM = value;
					this.SendPropertyChanged("PM");
					this.OnPMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NP", DbType="SmallMoney")]
		public System.Nullable<decimal> NP
		{
			get
			{
				return this._NP;
			}
			set
			{
				if ((this._NP != value))
				{
					this.OnNPChanging(value);
					this.SendPropertyChanging();
					this._NP = value;
					this.SendPropertyChanged("NP");
					this.OnNPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FS", DbType="SmallMoney")]
		public System.Nullable<decimal> FS
		{
			get
			{
				return this._FS;
			}
			set
			{
				if ((this._FS != value))
				{
					this.OnFSChanging(value);
					this.SendPropertyChanging();
					this._FS = value;
					this.SendPropertyChanged("FS");
					this.OnFSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DotNumber", DbType="VarChar(50)")]
		public string DotNumber
		{
			get
			{
				return this._DotNumber;
			}
			set
			{
				if ((this._DotNumber != value))
				{
					this.OnDotNumberChanging(value);
					this.SendPropertyChanging();
					this._DotNumber = value;
					this.SendPropertyChanged("DotNumber");
					this.OnDotNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VRstamp", DbType="VarChar(50)")]
		public string VRstamp
		{
			get
			{
				return this._VRstamp;
			}
			set
			{
				if ((this._VRstamp != value))
				{
					this.OnVRstampChanging(value);
					this.SendPropertyChanging();
					this._VRstamp = value;
					this.SendPropertyChanged("VRstamp");
					this.OnVRstampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_GreasingRecord", Storage="_GreasingRecords", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<GreasingRecord> GreasingRecords
		{
			get
			{
				return this._GreasingRecords;
			}
			set
			{
				this._GreasingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_ValveTest", Storage="_ValveTests", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<ValveTest> ValveTests
		{
			get
			{
				return this._ValveTests;
			}
			set
			{
				this._ValveTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_WellSafetyTest", Storage="_WellSafetyTests", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<WellSafetyTest> WellSafetyTests
		{
			get
			{
				return this._WellSafetyTests;
			}
			set
			{
				this._WellSafetyTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_ChemicalPumpTest", Storage="_ChemicalPumpTests", ThisKey="JobID", OtherKey="JobID")]
		public EntitySet<ChemicalPumpTest> ChemicalPumpTests
		{
			get
			{
				return this._ChemicalPumpTests;
			}
			set
			{
				this._ChemicalPumpTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientLocation_Job", Storage="_ClientLocation", ThisKey="ClientLocationID", OtherKey="ClientLocationID", IsForeignKey=true)]
		public ClientLocation ClientLocation
		{
			get
			{
				return this._ClientLocation.Entity;
			}
			set
			{
				ClientLocation previousValue = this._ClientLocation.Entity;
				if (((previousValue != value) 
							|| (this._ClientLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientLocation.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._ClientLocation.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._ClientLocationID = value.ClientLocationID;
					}
					else
					{
						this._ClientLocationID = default(int);
					}
					this.SendPropertyChanged("ClientLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryMethod_Job", Storage="_DeliveryMethod", ThisKey="DeliveryMethodID", OtherKey="DeliveryMethodID", IsForeignKey=true)]
		public DeliveryMethod DeliveryMethod
		{
			get
			{
				return this._DeliveryMethod.Entity;
			}
			set
			{
				DeliveryMethod previousValue = this._DeliveryMethod.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryMethod.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._DeliveryMethod.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._DeliveryMethodID = value.DeliveryMethodID;
					}
					else
					{
						this._DeliveryMethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeliveryMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_Job", Storage="_JobStatus", ThisKey="JobStatusID", OtherKey="JobStatusID", IsForeignKey=true)]
		public JobStatus JobStatus
		{
			get
			{
				return this._JobStatus.Entity;
			}
			set
			{
				JobStatus previousValue = this._JobStatus.Entity;
				if (((previousValue != value) 
							|| (this._JobStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobStatus.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._JobStatus.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._JobStatusID = value.JobStatusID;
					}
					else
					{
						this._JobStatusID = default(int);
					}
					this.SendPropertyChanged("JobStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobType_Job", Storage="_JobType", ThisKey="JobTypeID", OtherKey="JobTypeID", IsForeignKey=true)]
		public JobType JobType
		{
			get
			{
				return this._JobType.Entity;
			}
			set
			{
				JobType previousValue = this._JobType.Entity;
				if (((previousValue != value) 
							|| (this._JobType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobType.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._JobType.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._JobTypeID = value.JobTypeID;
					}
					else
					{
						this._JobTypeID = default(int);
					}
					this.SendPropertyChanged("JobType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job", Storage="_Employee", ThisKey="RequestedByID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._RequestedByID = value.EmployeeID;
					}
					else
					{
						this._RequestedByID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job1", Storage="_Employee1", ThisKey="CreatedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Jobs1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Jobs1.Add(this);
						this._CreatedBy = value.EmployeeID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job2", Storage="_Employee2", ThisKey="AssignedByID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee2
		{
			get
			{
				return this._Employee2.Entity;
			}
			set
			{
				Employee previousValue = this._Employee2.Entity;
				if (((previousValue != value) 
							|| (this._Employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee2.Entity = null;
						previousValue.Jobs2.Remove(this);
					}
					this._Employee2.Entity = value;
					if ((value != null))
					{
						value.Jobs2.Add(this);
						this._AssignedByID = value.EmployeeID;
					}
					else
					{
						this._AssignedByID = default(int);
					}
					this.SendPropertyChanged("Employee2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job3", Storage="_Employee3", ThisKey="AssignedToID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee3
		{
			get
			{
				return this._Employee3.Entity;
			}
			set
			{
				Employee previousValue = this._Employee3.Entity;
				if (((previousValue != value) 
							|| (this._Employee3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee3.Entity = null;
						previousValue.Jobs3.Remove(this);
					}
					this._Employee3.Entity = value;
					if ((value != null))
					{
						value.Jobs3.Add(this);
						this._AssignedToID = value.EmployeeID;
					}
					else
					{
						this._AssignedToID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job4", Storage="_Employee4", ThisKey="ApprovedByID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee4
		{
			get
			{
				return this._Employee4.Entity;
			}
			set
			{
				Employee previousValue = this._Employee4.Entity;
				if (((previousValue != value) 
							|| (this._Employee4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee4.Entity = null;
						previousValue.Jobs4.Remove(this);
					}
					this._Employee4.Entity = value;
					if ((value != null))
					{
						value.Jobs4.Add(this);
						this._ApprovedByID = value.EmployeeID;
					}
					else
					{
						this._ApprovedByID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee4");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GreasingRecords(GreasingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_GreasingRecords(GreasingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_ChemicalPumpTests(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_ChemicalPumpTests(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobStatus")]
	public partial class JobStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobStatusID;
		
		private string _Status;
		
		private int _Sequence;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobStatusIDChanging(int value);
    partial void OnJobStatusIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnSequenceChanging(int value);
    partial void OnSequenceChanged();
    #endregion
		
		public JobStatus()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JobStatusID
		{
			get
			{
				return this._JobStatusID;
			}
			set
			{
				if ((this._JobStatusID != value))
				{
					this.OnJobStatusIDChanging(value);
					this.SendPropertyChanging();
					this._JobStatusID = value;
					this.SendPropertyChanged("JobStatusID");
					this.OnJobStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int NOT NULL")]
		public int Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_Job", Storage="_Jobs", ThisKey="JobStatusID", OtherKey="JobStatusID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobTypes")]
	public partial class JobType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JobTypeID;
		
		private string _Type;
		
		private bool _Enabled;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobTypeIDChanging(int value);
    partial void OnJobTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public JobType()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JobTypeID
		{
			get
			{
				return this._JobTypeID;
			}
			set
			{
				if ((this._JobTypeID != value))
				{
					this.OnJobTypeIDChanging(value);
					this.SendPropertyChanging();
					this._JobTypeID = value;
					this.SendPropertyChanged("JobTypeID");
					this.OnJobTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobType_Job", Storage="_Jobs", ThisKey="JobTypeID", OtherKey="JobTypeID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobType = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lists")]
	public partial class List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ListID;
		
		private string _ListKey;
		
		private int _ListValue;
		
		private int _SortOrder;
		
		private string _Display1;
		
		private string _Display2;
		
		private string _Abbr;
		
		private string _SysCode;
		
		private EntitySet<ValveTest> _ValveTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListIDChanging(int value);
    partial void OnListIDChanged();
    partial void OnListKeyChanging(string value);
    partial void OnListKeyChanged();
    partial void OnListValueChanging(int value);
    partial void OnListValueChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnDisplay1Changing(string value);
    partial void OnDisplay1Changed();
    partial void OnDisplay2Changing(string value);
    partial void OnDisplay2Changed();
    partial void OnAbbrChanging(string value);
    partial void OnAbbrChanged();
    partial void OnSysCodeChanging(string value);
    partial void OnSysCodeChanged();
    #endregion
		
		public List()
		{
			this._ValveTests = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests), new Action<ValveTest>(this.detach_ValveTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ListID
		{
			get
			{
				return this._ListID;
			}
			set
			{
				if ((this._ListID != value))
				{
					this.OnListIDChanging(value);
					this.SendPropertyChanging();
					this._ListID = value;
					this.SendPropertyChanged("ListID");
					this.OnListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ListKey
		{
			get
			{
				return this._ListKey;
			}
			set
			{
				if ((this._ListKey != value))
				{
					this.OnListKeyChanging(value);
					this.SendPropertyChanging();
					this._ListKey = value;
					this.SendPropertyChanged("ListKey");
					this.OnListKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListValue", DbType="Int NOT NULL")]
		public int ListValue
		{
			get
			{
				return this._ListValue;
			}
			set
			{
				if ((this._ListValue != value))
				{
					this.OnListValueChanging(value);
					this.SendPropertyChanging();
					this._ListValue = value;
					this.SendPropertyChanged("ListValue");
					this.OnListValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Display1", DbType="VarChar(50)")]
		public string Display1
		{
			get
			{
				return this._Display1;
			}
			set
			{
				if ((this._Display1 != value))
				{
					this.OnDisplay1Changing(value);
					this.SendPropertyChanging();
					this._Display1 = value;
					this.SendPropertyChanged("Display1");
					this.OnDisplay1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Display2", DbType="VarChar(50)")]
		public string Display2
		{
			get
			{
				return this._Display2;
			}
			set
			{
				if ((this._Display2 != value))
				{
					this.OnDisplay2Changing(value);
					this.SendPropertyChanging();
					this._Display2 = value;
					this.SendPropertyChanged("Display2");
					this.OnDisplay2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbr", DbType="VarChar(20)")]
		public string Abbr
		{
			get
			{
				return this._Abbr;
			}
			set
			{
				if ((this._Abbr != value))
				{
					this.OnAbbrChanging(value);
					this.SendPropertyChanging();
					this._Abbr = value;
					this.SendPropertyChanged("Abbr");
					this.OnAbbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysCode", DbType="VarChar(50)")]
		public string SysCode
		{
			get
			{
				return this._SysCode;
			}
			set
			{
				if ((this._SysCode != value))
				{
					this.OnSysCodeChanging(value);
					this.SendPropertyChanging();
					this._SysCode = value;
					this.SendPropertyChanged("SysCode");
					this.OnSysCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="List_ValveTest", Storage="_ValveTests", ThisKey="ListID", OtherKey="CapacityTypeID")]
		public EntitySet<ValveTest> ValveTests
		{
			get
			{
				return this._ValveTests;
			}
			set
			{
				this._ValveTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.List = this;
		}
		
		private void detach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.List = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManufacturerModels")]
	public partial class ManufacturerModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManufacturerModelID;
		
		private int _ManufacturerID;
		
		private string _Model;
		
		private bool _Active;
		
		private byte[] _Version;
		
		private EntitySet<ServiceItem> _ServiceItems;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerModelIDChanging(int value);
    partial void OnManufacturerModelIDChanged();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public ManufacturerModel()
		{
			this._ServiceItems = new EntitySet<ServiceItem>(new Action<ServiceItem>(this.attach_ServiceItems), new Action<ServiceItem>(this.detach_ServiceItems));
			this._Manufacturer = default(EntityRef<Manufacturer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerModelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManufacturerModelID
		{
			get
			{
				return this._ManufacturerModelID;
			}
			set
			{
				if ((this._ManufacturerModelID != value))
				{
					this.OnManufacturerModelIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerModelID = value;
					this.SendPropertyChanged("ManufacturerModelID");
					this.OnManufacturerModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerID", DbType="Int NOT NULL")]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManufacturerModel_ServiceItem", Storage="_ServiceItems", ThisKey="ManufacturerModelID", OtherKey="ManufacturerModelID")]
		public EntitySet<ServiceItem> ServiceItems
		{
			get
			{
				return this._ServiceItems;
			}
			set
			{
				this._ServiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_ManufacturerModel", Storage="_Manufacturer", ThisKey="ManufacturerID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.ManufacturerModels.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.ManufacturerModels.Add(this);
						this._ManufacturerID = value.ManufacturerID;
					}
					else
					{
						this._ManufacturerID = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.ManufacturerModel = this;
		}
		
		private void detach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.ManufacturerModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manufacturers")]
	public partial class Manufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ManufacturerID;
		
		private string _Manufacturer;
		
		private bool _Active;
		
		private byte[] _Version;
		
		private EntitySet<ManufacturerModel> _ManufacturerModels;
		
		private EntitySet<ServiceItem> _ServiceItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManufacturerIDChanging(int value);
    partial void OnManufacturerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public Manufacturer()
		{
			this._ManufacturerModels = new EntitySet<ManufacturerModel>(new Action<ManufacturerModel>(this.attach_ManufacturerModels), new Action<ManufacturerModel>(this.detach_ManufacturerModels));
			this._ServiceItems = new EntitySet<ServiceItem>(new Action<ServiceItem>(this.attach_ServiceItems), new Action<ServiceItem>(this.detach_ServiceItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Manufacturer", Storage="_Manufacturer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_ManufacturerModel", Storage="_ManufacturerModels", ThisKey="ManufacturerID", OtherKey="ManufacturerID")]
		public EntitySet<ManufacturerModel> ManufacturerModels
		{
			get
			{
				return this._ManufacturerModels;
			}
			set
			{
				this._ManufacturerModels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_ServiceItem", Storage="_ServiceItems", ThisKey="ManufacturerID", OtherKey="ManufacturerID")]
		public EntitySet<ServiceItem> ServiceItems
		{
			get
			{
				return this._ServiceItems;
			}
			set
			{
				this._ServiceItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManufacturerModels(ManufacturerModel entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_ManufacturerModels(ManufacturerModel entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceItemCategories")]
	public partial class ServiceItemCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceItemCategoryID;
		
		private string _Category;
		
		private EntitySet<ServiceItemType> _ServiceItemTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceItemCategoryIDChanging(int value);
    partial void OnServiceItemCategoryIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public ServiceItemCategory()
		{
			this._ServiceItemTypes = new EntitySet<ServiceItemType>(new Action<ServiceItemType>(this.attach_ServiceItemTypes), new Action<ServiceItemType>(this.detach_ServiceItemTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceItemCategoryID
		{
			get
			{
				return this._ServiceItemCategoryID;
			}
			set
			{
				if ((this._ServiceItemCategoryID != value))
				{
					this.OnServiceItemCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemCategoryID = value;
					this.SendPropertyChanged("ServiceItemCategoryID");
					this.OnServiceItemCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItemCategory_ServiceItemType", Storage="_ServiceItemTypes", ThisKey="ServiceItemCategoryID", OtherKey="ServiceItemCategoryID")]
		public EntitySet<ServiceItemType> ServiceItemTypes
		{
			get
			{
				return this._ServiceItemTypes;
			}
			set
			{
				this._ServiceItemTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceItemTypes(ServiceItemType entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItemCategory = this;
		}
		
		private void detach_ServiceItemTypes(ServiceItemType entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItemCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceItems")]
	public partial class ServiceItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceItemID;
		
		private System.Nullable<int> _ServiceItemTypeID;
		
		private System.Nullable<int> _ClientLocationID;
		
		private System.Nullable<int> _ManufacturerID;
		
		private System.Nullable<int> _ManufacturerModelID;
		
		private string _SerialNum;
		
		private string _Description;
		
		private System.Nullable<bool> _Active;
		
		private string _SapEquipNum;
		
		private System.Nullable<bool> _Threaded;
		
		private System.Nullable<bool> _Flanged;
		
		private System.Nullable<decimal> _InletSize;
		
		private System.Nullable<decimal> _OutletSize;
		
		private System.Nullable<decimal> _InletFlangeRating;
		
		private System.Nullable<decimal> _OutletFlangeRating;
		
		private byte[] _Version;
		
		private EntitySet<GreasingRecordItem> _GreasingRecordItems;
		
		private EntitySet<ValveTest> _ValveTests;
		
		private EntitySet<WellSafetyTest> _WellSafetyTests;
		
		private EntitySet<ChemicalPumpTest> _ChemicalPumpTests;
		
		private EntityRef<ClientLocation> _ClientLocation;
		
		private EntityRef<ManufacturerModel> _ManufacturerModel;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<ServiceItemType> _ServiceItemType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceItemIDChanging(int value);
    partial void OnServiceItemIDChanged();
    partial void OnServiceItemTypeIDChanging(System.Nullable<int> value);
    partial void OnServiceItemTypeIDChanged();
    partial void OnClientLocationIDChanging(System.Nullable<int> value);
    partial void OnClientLocationIDChanged();
    partial void OnManufacturerIDChanging(System.Nullable<int> value);
    partial void OnManufacturerIDChanged();
    partial void OnManufacturerModelIDChanging(System.Nullable<int> value);
    partial void OnManufacturerModelIDChanged();
    partial void OnSerialNumChanging(string value);
    partial void OnSerialNumChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnSapEquipNumChanging(string value);
    partial void OnSapEquipNumChanged();
    partial void OnThreadedChanging(System.Nullable<bool> value);
    partial void OnThreadedChanged();
    partial void OnFlangedChanging(System.Nullable<bool> value);
    partial void OnFlangedChanged();
    partial void OnInletSizeChanging(System.Nullable<decimal> value);
    partial void OnInletSizeChanged();
    partial void OnOutletSizeChanging(System.Nullable<decimal> value);
    partial void OnOutletSizeChanged();
    partial void OnInletFlangeRatingChanging(System.Nullable<decimal> value);
    partial void OnInletFlangeRatingChanged();
    partial void OnOutletFlangeRatingChanging(System.Nullable<decimal> value);
    partial void OnOutletFlangeRatingChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public ServiceItem()
		{
			this._GreasingRecordItems = new EntitySet<GreasingRecordItem>(new Action<GreasingRecordItem>(this.attach_GreasingRecordItems), new Action<GreasingRecordItem>(this.detach_GreasingRecordItems));
			this._ValveTests = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests), new Action<ValveTest>(this.detach_ValveTests));
			this._WellSafetyTests = new EntitySet<WellSafetyTest>(new Action<WellSafetyTest>(this.attach_WellSafetyTests), new Action<WellSafetyTest>(this.detach_WellSafetyTests));
			this._ChemicalPumpTests = new EntitySet<ChemicalPumpTest>(new Action<ChemicalPumpTest>(this.attach_ChemicalPumpTests), new Action<ChemicalPumpTest>(this.detach_ChemicalPumpTests));
			this._ClientLocation = default(EntityRef<ClientLocation>);
			this._ManufacturerModel = default(EntityRef<ManufacturerModel>);
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._ServiceItemType = default(EntityRef<ServiceItemType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceItemID
		{
			get
			{
				return this._ServiceItemID;
			}
			set
			{
				if ((this._ServiceItemID != value))
				{
					this.OnServiceItemIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemID = value;
					this.SendPropertyChanged("ServiceItemID");
					this.OnServiceItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemTypeID", DbType="Int")]
		public System.Nullable<int> ServiceItemTypeID
		{
			get
			{
				return this._ServiceItemTypeID;
			}
			set
			{
				if ((this._ServiceItemTypeID != value))
				{
					if (this._ServiceItemType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceItemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemTypeID = value;
					this.SendPropertyChanged("ServiceItemTypeID");
					this.OnServiceItemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationID", DbType="Int")]
		public System.Nullable<int> ClientLocationID
		{
			get
			{
				return this._ClientLocationID;
			}
			set
			{
				if ((this._ClientLocationID != value))
				{
					if (this._ClientLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientLocationIDChanging(value);
					this.SendPropertyChanging();
					this._ClientLocationID = value;
					this.SendPropertyChanged("ClientLocationID");
					this.OnClientLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerID", DbType="Int")]
		public System.Nullable<int> ManufacturerID
		{
			get
			{
				return this._ManufacturerID;
			}
			set
			{
				if ((this._ManufacturerID != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerID = value;
					this.SendPropertyChanged("ManufacturerID");
					this.OnManufacturerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerModelID", DbType="Int")]
		public System.Nullable<int> ManufacturerModelID
		{
			get
			{
				return this._ManufacturerModelID;
			}
			set
			{
				if ((this._ManufacturerModelID != value))
				{
					if (this._ManufacturerModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManufacturerModelIDChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerModelID = value;
					this.SendPropertyChanged("ManufacturerModelID");
					this.OnManufacturerModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNum", DbType="VarChar(50)")]
		public string SerialNum
		{
			get
			{
				return this._SerialNum;
			}
			set
			{
				if ((this._SerialNum != value))
				{
					this.OnSerialNumChanging(value);
					this.SendPropertyChanging();
					this._SerialNum = value;
					this.SendPropertyChanged("SerialNum");
					this.OnSerialNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapEquipNum", DbType="VarChar(50)")]
		public string SapEquipNum
		{
			get
			{
				return this._SapEquipNum;
			}
			set
			{
				if ((this._SapEquipNum != value))
				{
					this.OnSapEquipNumChanging(value);
					this.SendPropertyChanging();
					this._SapEquipNum = value;
					this.SendPropertyChanged("SapEquipNum");
					this.OnSapEquipNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Threaded", DbType="Bit")]
		public System.Nullable<bool> Threaded
		{
			get
			{
				return this._Threaded;
			}
			set
			{
				if ((this._Threaded != value))
				{
					this.OnThreadedChanging(value);
					this.SendPropertyChanging();
					this._Threaded = value;
					this.SendPropertyChanged("Threaded");
					this.OnThreadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flanged", DbType="Bit")]
		public System.Nullable<bool> Flanged
		{
			get
			{
				return this._Flanged;
			}
			set
			{
				if ((this._Flanged != value))
				{
					this.OnFlangedChanging(value);
					this.SendPropertyChanging();
					this._Flanged = value;
					this.SendPropertyChanged("Flanged");
					this.OnFlangedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InletSize", DbType="Decimal(9,3)")]
		public System.Nullable<decimal> InletSize
		{
			get
			{
				return this._InletSize;
			}
			set
			{
				if ((this._InletSize != value))
				{
					this.OnInletSizeChanging(value);
					this.SendPropertyChanging();
					this._InletSize = value;
					this.SendPropertyChanged("InletSize");
					this.OnInletSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutletSize", DbType="Decimal(9,3)")]
		public System.Nullable<decimal> OutletSize
		{
			get
			{
				return this._OutletSize;
			}
			set
			{
				if ((this._OutletSize != value))
				{
					this.OnOutletSizeChanging(value);
					this.SendPropertyChanging();
					this._OutletSize = value;
					this.SendPropertyChanged("OutletSize");
					this.OnOutletSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InletFlangeRating", DbType="Decimal(9,3)")]
		public System.Nullable<decimal> InletFlangeRating
		{
			get
			{
				return this._InletFlangeRating;
			}
			set
			{
				if ((this._InletFlangeRating != value))
				{
					this.OnInletFlangeRatingChanging(value);
					this.SendPropertyChanging();
					this._InletFlangeRating = value;
					this.SendPropertyChanged("InletFlangeRating");
					this.OnInletFlangeRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutletFlangeRating", DbType="Decimal(9,3)")]
		public System.Nullable<decimal> OutletFlangeRating
		{
			get
			{
				return this._OutletFlangeRating;
			}
			set
			{
				if ((this._OutletFlangeRating != value))
				{
					this.OnOutletFlangeRatingChanging(value);
					this.SendPropertyChanging();
					this._OutletFlangeRating = value;
					this.SendPropertyChanged("OutletFlangeRating");
					this.OnOutletFlangeRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_GreasingRecordItem", Storage="_GreasingRecordItems", ThisKey="ServiceItemID", OtherKey="ServiceItemID")]
		public EntitySet<GreasingRecordItem> GreasingRecordItems
		{
			get
			{
				return this._GreasingRecordItems;
			}
			set
			{
				this._GreasingRecordItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_ValveTest", Storage="_ValveTests", ThisKey="ServiceItemID", OtherKey="ServiceItemID")]
		public EntitySet<ValveTest> ValveTests
		{
			get
			{
				return this._ValveTests;
			}
			set
			{
				this._ValveTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_WellSafetyTest", Storage="_WellSafetyTests", ThisKey="ServiceItemID", OtherKey="ServiceItemID")]
		public EntitySet<WellSafetyTest> WellSafetyTests
		{
			get
			{
				return this._WellSafetyTests;
			}
			set
			{
				this._WellSafetyTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_ChemicalPumpTest", Storage="_ChemicalPumpTests", ThisKey="ServiceItemID", OtherKey="ServiceItemID")]
		public EntitySet<ChemicalPumpTest> ChemicalPumpTests
		{
			get
			{
				return this._ChemicalPumpTests;
			}
			set
			{
				this._ChemicalPumpTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientLocation_ServiceItem", Storage="_ClientLocation", ThisKey="ClientLocationID", OtherKey="ClientLocationID", IsForeignKey=true)]
		public ClientLocation ClientLocation
		{
			get
			{
				return this._ClientLocation.Entity;
			}
			set
			{
				ClientLocation previousValue = this._ClientLocation.Entity;
				if (((previousValue != value) 
							|| (this._ClientLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientLocation.Entity = null;
						previousValue.ServiceItems.Remove(this);
					}
					this._ClientLocation.Entity = value;
					if ((value != null))
					{
						value.ServiceItems.Add(this);
						this._ClientLocationID = value.ClientLocationID;
					}
					else
					{
						this._ClientLocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManufacturerModel_ServiceItem", Storage="_ManufacturerModel", ThisKey="ManufacturerModelID", OtherKey="ManufacturerModelID", IsForeignKey=true)]
		public ManufacturerModel ManufacturerModel
		{
			get
			{
				return this._ManufacturerModel.Entity;
			}
			set
			{
				ManufacturerModel previousValue = this._ManufacturerModel.Entity;
				if (((previousValue != value) 
							|| (this._ManufacturerModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManufacturerModel.Entity = null;
						previousValue.ServiceItems.Remove(this);
					}
					this._ManufacturerModel.Entity = value;
					if ((value != null))
					{
						value.ServiceItems.Add(this);
						this._ManufacturerModelID = value.ManufacturerModelID;
					}
					else
					{
						this._ManufacturerModelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ManufacturerModel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_ServiceItem", Storage="_Manufacturer", ThisKey="ManufacturerID", OtherKey="ManufacturerID", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.ServiceItems.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.ServiceItems.Add(this);
						this._ManufacturerID = value.ManufacturerID;
					}
					else
					{
						this._ManufacturerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItemType_ServiceItem", Storage="_ServiceItemType", ThisKey="ServiceItemTypeID", OtherKey="ServiceItemTypeID", IsForeignKey=true)]
		public ServiceItemType ServiceItemType
		{
			get
			{
				return this._ServiceItemType.Entity;
			}
			set
			{
				ServiceItemType previousValue = this._ServiceItemType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceItemType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceItemType.Entity = null;
						previousValue.ServiceItems.Remove(this);
					}
					this._ServiceItemType.Entity = value;
					if ((value != null))
					{
						value.ServiceItems.Add(this);
						this._ServiceItemTypeID = value.ServiceItemTypeID;
					}
					else
					{
						this._ServiceItemTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceItemType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GreasingRecordItems(GreasingRecordItem entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = this;
		}
		
		private void detach_GreasingRecordItems(GreasingRecordItem entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = null;
		}
		
		private void attach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = this;
		}
		
		private void detach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = null;
		}
		
		private void attach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = this;
		}
		
		private void detach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = null;
		}
		
		private void attach_ChemicalPumpTests(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = this;
		}
		
		private void detach_ChemicalPumpTests(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceItemTypes")]
	public partial class ServiceItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServiceItemTypeID;
		
		private string _Type;
		
		private int _ServiceItemCategoryID;
		
		private EntitySet<ServiceItem> _ServiceItems;
		
		private EntityRef<ServiceItemCategory> _ServiceItemCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceItemTypeIDChanging(int value);
    partial void OnServiceItemTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnServiceItemCategoryIDChanging(int value);
    partial void OnServiceItemCategoryIDChanged();
    #endregion
		
		public ServiceItemType()
		{
			this._ServiceItems = new EntitySet<ServiceItem>(new Action<ServiceItem>(this.attach_ServiceItems), new Action<ServiceItem>(this.detach_ServiceItems));
			this._ServiceItemCategory = default(EntityRef<ServiceItemCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServiceItemTypeID
		{
			get
			{
				return this._ServiceItemTypeID;
			}
			set
			{
				if ((this._ServiceItemTypeID != value))
				{
					this.OnServiceItemTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemTypeID = value;
					this.SendPropertyChanged("ServiceItemTypeID");
					this.OnServiceItemTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemCategoryID", DbType="Int NOT NULL")]
		public int ServiceItemCategoryID
		{
			get
			{
				return this._ServiceItemCategoryID;
			}
			set
			{
				if ((this._ServiceItemCategoryID != value))
				{
					if (this._ServiceItemCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceItemCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemCategoryID = value;
					this.SendPropertyChanged("ServiceItemCategoryID");
					this.OnServiceItemCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItemType_ServiceItem", Storage="_ServiceItems", ThisKey="ServiceItemTypeID", OtherKey="ServiceItemTypeID")]
		public EntitySet<ServiceItem> ServiceItems
		{
			get
			{
				return this._ServiceItems;
			}
			set
			{
				this._ServiceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItemCategory_ServiceItemType", Storage="_ServiceItemCategory", ThisKey="ServiceItemCategoryID", OtherKey="ServiceItemCategoryID", IsForeignKey=true)]
		public ServiceItemCategory ServiceItemCategory
		{
			get
			{
				return this._ServiceItemCategory.Entity;
			}
			set
			{
				ServiceItemCategory previousValue = this._ServiceItemCategory.Entity;
				if (((previousValue != value) 
							|| (this._ServiceItemCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceItemCategory.Entity = null;
						previousValue.ServiceItemTypes.Remove(this);
					}
					this._ServiceItemCategory.Entity = value;
					if ((value != null))
					{
						value.ServiceItemTypes.Add(this);
						this._ServiceItemCategoryID = value.ServiceItemCategoryID;
					}
					else
					{
						this._ServiceItemCategoryID = default(int);
					}
					this.SendPropertyChanged("ServiceItemCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItemType = this;
		}
		
		private void detach_ServiceItems(ServiceItem entity)
		{
			this.SendPropertyChanging();
			entity.ServiceItemType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceLocationTypes")]
	public partial class ServiceLocationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerLocationTypeID;
		
		private string _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerLocationTypeIDChanging(int value);
    partial void OnCustomerLocationTypeIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public ServiceLocationType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerLocationTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerLocationTypeID
		{
			get
			{
				return this._CustomerLocationTypeID;
			}
			set
			{
				if ((this._CustomerLocationTypeID != value))
				{
					this.OnCustomerLocationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerLocationTypeID = value;
					this.SendPropertyChanged("CustomerLocationTypeID");
					this.OnCustomerLocationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestResults")]
	public partial class TestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestResultID;
		
		private string _Result;
		
		private EntitySet<ValveTest> _ValveTests;
		
		private EntitySet<WellSafetyTest> _WellSafetyTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestResultIDChanging(int value);
    partial void OnTestResultIDChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    #endregion
		
		public TestResult()
		{
			this._ValveTests = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests), new Action<ValveTest>(this.detach_ValveTests));
			this._WellSafetyTests = new EntitySet<WellSafetyTest>(new Action<WellSafetyTest>(this.attach_WellSafetyTests), new Action<WellSafetyTest>(this.detach_WellSafetyTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestResultID
		{
			get
			{
				return this._TestResultID;
			}
			set
			{
				if ((this._TestResultID != value))
				{
					this.OnTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._TestResultID = value;
					this.SendPropertyChanged("TestResultID");
					this.OnTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestResult_ValveTest", Storage="_ValveTests", ThisKey="TestResultID", OtherKey="TestResultID")]
		public EntitySet<ValveTest> ValveTests
		{
			get
			{
				return this._ValveTests;
			}
			set
			{
				this._ValveTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestResult_WellSafetyTest", Storage="_WellSafetyTests", ThisKey="TestResultID", OtherKey="TestResultID")]
		public EntitySet<WellSafetyTest> WellSafetyTests
		{
			get
			{
				return this._WellSafetyTests;
			}
			set
			{
				this._WellSafetyTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.TestResult = this;
		}
		
		private void detach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.TestResult = null;
		}
		
		private void attach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.TestResult = this;
		}
		
		private void detach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.TestResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ValveTests")]
	public partial class ValveTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ValveTestID;
		
		private int _JobID;
		
		private int _ServiceItemID;
		
		private string _FSRNum;
		
		private System.Nullable<System.DateTime> _DateTested;
		
		private System.Nullable<double> _SetPressure;
		
		private System.Nullable<double> _BackPressure;
		
		private System.Nullable<double> _ColdDiffPressure;
		
		private System.Nullable<double> _TempCorr;
		
		private System.Nullable<double> _Capacity;
		
		private System.Nullable<int> _CapacityTypeID;
		
		private string _SealNum;
		
		private string _GaugeNum;
		
		private System.Nullable<System.DateTime> _CalibrationDue;
		
		private System.Nullable<bool> _Coded;
		
		private System.Nullable<System.DateTime> _ValveDate;
		
		private System.Nullable<decimal> _SetPressureFound;
		
		private System.Nullable<decimal> _SetPressureLeft;
		
		private System.Nullable<int> _TestResultID;
		
		private string _Notes;
		
		private System.Nullable<int> _TechID;
		
		private string _CustomerWitness;
		
		private string _CostCenter;
		
		private string _SapPsv;
		
		private string _PsvApplication;
		
		private System.Nullable<bool> _IsolationValve;
		
		private System.Nullable<int> _ReliefValveSupport;
		
		private System.Nullable<bool> _TestPort;
		
		private System.Nullable<int> _WeatherCap;
		
		private System.Nullable<bool> _DotLocation;
		
		private bool _JsaComplete;
		
		private string _ReviewItems;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private byte[] _Version;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<List> _List;
		
		private EntityRef<ServiceItem> _ServiceItem;
		
		private EntityRef<TestResult> _TestResult;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Employee> _Employee2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValveTestIDChanging(int value);
    partial void OnValveTestIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnServiceItemIDChanging(int value);
    partial void OnServiceItemIDChanged();
    partial void OnFSRNumChanging(string value);
    partial void OnFSRNumChanged();
    partial void OnDateTestedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTestedChanged();
    partial void OnSetPressureChanging(System.Nullable<double> value);
    partial void OnSetPressureChanged();
    partial void OnBackPressureChanging(System.Nullable<double> value);
    partial void OnBackPressureChanged();
    partial void OnColdDiffPressureChanging(System.Nullable<double> value);
    partial void OnColdDiffPressureChanged();
    partial void OnTempCorrChanging(System.Nullable<double> value);
    partial void OnTempCorrChanged();
    partial void OnCapacityChanging(System.Nullable<double> value);
    partial void OnCapacityChanged();
    partial void OnCapacityTypeIDChanging(System.Nullable<int> value);
    partial void OnCapacityTypeIDChanged();
    partial void OnSealNumChanging(string value);
    partial void OnSealNumChanged();
    partial void OnGaugeNumChanging(string value);
    partial void OnGaugeNumChanged();
    partial void OnCalibrationDueChanging(System.Nullable<System.DateTime> value);
    partial void OnCalibrationDueChanged();
    partial void OnCodedChanging(System.Nullable<bool> value);
    partial void OnCodedChanged();
    partial void OnValveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValveDateChanged();
    partial void OnSetPressureFoundChanging(System.Nullable<decimal> value);
    partial void OnSetPressureFoundChanged();
    partial void OnSetPressureLeftChanging(System.Nullable<decimal> value);
    partial void OnSetPressureLeftChanged();
    partial void OnTestResultIDChanging(System.Nullable<int> value);
    partial void OnTestResultIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnTechIDChanging(System.Nullable<int> value);
    partial void OnTechIDChanged();
    partial void OnCustomerWitnessChanging(string value);
    partial void OnCustomerWitnessChanged();
    partial void OnCostCenterChanging(string value);
    partial void OnCostCenterChanged();
    partial void OnSapPsvChanging(string value);
    partial void OnSapPsvChanged();
    partial void OnPsvApplicationChanging(string value);
    partial void OnPsvApplicationChanged();
    partial void OnIsolationValveChanging(System.Nullable<bool> value);
    partial void OnIsolationValveChanged();
    partial void OnReliefValveSupportChanging(System.Nullable<int> value);
    partial void OnReliefValveSupportChanged();
    partial void OnTestPortChanging(System.Nullable<bool> value);
    partial void OnTestPortChanged();
    partial void OnWeatherCapChanging(System.Nullable<int> value);
    partial void OnWeatherCapChanged();
    partial void OnDotLocationChanging(System.Nullable<bool> value);
    partial void OnDotLocationChanged();
    partial void OnJsaCompleteChanging(bool value);
    partial void OnJsaCompleteChanged();
    partial void OnReviewItemsChanging(string value);
    partial void OnReviewItemsChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public ValveTest()
		{
			this._Job = default(EntityRef<Job>);
			this._List = default(EntityRef<List>);
			this._ServiceItem = default(EntityRef<ServiceItem>);
			this._TestResult = default(EntityRef<TestResult>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Employee2 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValveTestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ValveTestID
		{
			get
			{
				return this._ValveTestID;
			}
			set
			{
				if ((this._ValveTestID != value))
				{
					this.OnValveTestIDChanging(value);
					this.SendPropertyChanging();
					this._ValveTestID = value;
					this.SendPropertyChanged("ValveTestID");
					this.OnValveTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemID", DbType="Int NOT NULL")]
		public int ServiceItemID
		{
			get
			{
				return this._ServiceItemID;
			}
			set
			{
				if ((this._ServiceItemID != value))
				{
					if (this._ServiceItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceItemIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemID = value;
					this.SendPropertyChanged("ServiceItemID");
					this.OnServiceItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSRNum", DbType="VarChar(50)")]
		public string FSRNum
		{
			get
			{
				return this._FSRNum;
			}
			set
			{
				if ((this._FSRNum != value))
				{
					this.OnFSRNumChanging(value);
					this.SendPropertyChanging();
					this._FSRNum = value;
					this.SendPropertyChanged("FSRNum");
					this.OnFSRNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTested", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTested
		{
			get
			{
				return this._DateTested;
			}
			set
			{
				if ((this._DateTested != value))
				{
					this.OnDateTestedChanging(value);
					this.SendPropertyChanging();
					this._DateTested = value;
					this.SendPropertyChanged("DateTested");
					this.OnDateTestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetPressure", DbType="Float")]
		public System.Nullable<double> SetPressure
		{
			get
			{
				return this._SetPressure;
			}
			set
			{
				if ((this._SetPressure != value))
				{
					this.OnSetPressureChanging(value);
					this.SendPropertyChanging();
					this._SetPressure = value;
					this.SendPropertyChanged("SetPressure");
					this.OnSetPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackPressure", DbType="Float")]
		public System.Nullable<double> BackPressure
		{
			get
			{
				return this._BackPressure;
			}
			set
			{
				if ((this._BackPressure != value))
				{
					this.OnBackPressureChanging(value);
					this.SendPropertyChanging();
					this._BackPressure = value;
					this.SendPropertyChanged("BackPressure");
					this.OnBackPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColdDiffPressure", DbType="Float")]
		public System.Nullable<double> ColdDiffPressure
		{
			get
			{
				return this._ColdDiffPressure;
			}
			set
			{
				if ((this._ColdDiffPressure != value))
				{
					this.OnColdDiffPressureChanging(value);
					this.SendPropertyChanging();
					this._ColdDiffPressure = value;
					this.SendPropertyChanged("ColdDiffPressure");
					this.OnColdDiffPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempCorr", DbType="Float")]
		public System.Nullable<double> TempCorr
		{
			get
			{
				return this._TempCorr;
			}
			set
			{
				if ((this._TempCorr != value))
				{
					this.OnTempCorrChanging(value);
					this.SendPropertyChanging();
					this._TempCorr = value;
					this.SendPropertyChanged("TempCorr");
					this.OnTempCorrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Float")]
		public System.Nullable<double> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapacityTypeID", DbType="Int")]
		public System.Nullable<int> CapacityTypeID
		{
			get
			{
				return this._CapacityTypeID;
			}
			set
			{
				if ((this._CapacityTypeID != value))
				{
					if (this._List.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCapacityTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CapacityTypeID = value;
					this.SendPropertyChanged("CapacityTypeID");
					this.OnCapacityTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SealNum", DbType="VarChar(50)")]
		public string SealNum
		{
			get
			{
				return this._SealNum;
			}
			set
			{
				if ((this._SealNum != value))
				{
					this.OnSealNumChanging(value);
					this.SendPropertyChanging();
					this._SealNum = value;
					this.SendPropertyChanged("SealNum");
					this.OnSealNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GaugeNum", DbType="VarChar(50)")]
		public string GaugeNum
		{
			get
			{
				return this._GaugeNum;
			}
			set
			{
				if ((this._GaugeNum != value))
				{
					this.OnGaugeNumChanging(value);
					this.SendPropertyChanging();
					this._GaugeNum = value;
					this.SendPropertyChanged("GaugeNum");
					this.OnGaugeNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalibrationDue", DbType="DateTime")]
		public System.Nullable<System.DateTime> CalibrationDue
		{
			get
			{
				return this._CalibrationDue;
			}
			set
			{
				if ((this._CalibrationDue != value))
				{
					this.OnCalibrationDueChanging(value);
					this.SendPropertyChanging();
					this._CalibrationDue = value;
					this.SendPropertyChanged("CalibrationDue");
					this.OnCalibrationDueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coded", DbType="Bit")]
		public System.Nullable<bool> Coded
		{
			get
			{
				return this._Coded;
			}
			set
			{
				if ((this._Coded != value))
				{
					this.OnCodedChanging(value);
					this.SendPropertyChanging();
					this._Coded = value;
					this.SendPropertyChanged("Coded");
					this.OnCodedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValveDate
		{
			get
			{
				return this._ValveDate;
			}
			set
			{
				if ((this._ValveDate != value))
				{
					this.OnValveDateChanging(value);
					this.SendPropertyChanging();
					this._ValveDate = value;
					this.SendPropertyChanged("ValveDate");
					this.OnValveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetPressureFound", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> SetPressureFound
		{
			get
			{
				return this._SetPressureFound;
			}
			set
			{
				if ((this._SetPressureFound != value))
				{
					this.OnSetPressureFoundChanging(value);
					this.SendPropertyChanging();
					this._SetPressureFound = value;
					this.SendPropertyChanged("SetPressureFound");
					this.OnSetPressureFoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetPressureLeft", DbType="Decimal(9,2)")]
		public System.Nullable<decimal> SetPressureLeft
		{
			get
			{
				return this._SetPressureLeft;
			}
			set
			{
				if ((this._SetPressureLeft != value))
				{
					this.OnSetPressureLeftChanging(value);
					this.SendPropertyChanging();
					this._SetPressureLeft = value;
					this.SendPropertyChanged("SetPressureLeft");
					this.OnSetPressureLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestResultID", DbType="Int")]
		public System.Nullable<int> TestResultID
		{
			get
			{
				return this._TestResultID;
			}
			set
			{
				if ((this._TestResultID != value))
				{
					if (this._TestResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._TestResultID = value;
					this.SendPropertyChanged("TestResultID");
					this.OnTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2000)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechID", DbType="Int")]
		public System.Nullable<int> TechID
		{
			get
			{
				return this._TechID;
			}
			set
			{
				if ((this._TechID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechIDChanging(value);
					this.SendPropertyChanging();
					this._TechID = value;
					this.SendPropertyChanged("TechID");
					this.OnTechIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerWitness", DbType="VarChar(50)")]
		public string CustomerWitness
		{
			get
			{
				return this._CustomerWitness;
			}
			set
			{
				if ((this._CustomerWitness != value))
				{
					this.OnCustomerWitnessChanging(value);
					this.SendPropertyChanging();
					this._CustomerWitness = value;
					this.SendPropertyChanged("CustomerWitness");
					this.OnCustomerWitnessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostCenter", DbType="VarChar(50)")]
		public string CostCenter
		{
			get
			{
				return this._CostCenter;
			}
			set
			{
				if ((this._CostCenter != value))
				{
					this.OnCostCenterChanging(value);
					this.SendPropertyChanging();
					this._CostCenter = value;
					this.SendPropertyChanged("CostCenter");
					this.OnCostCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapPsv", DbType="VarChar(255)")]
		public string SapPsv
		{
			get
			{
				return this._SapPsv;
			}
			set
			{
				if ((this._SapPsv != value))
				{
					this.OnSapPsvChanging(value);
					this.SendPropertyChanging();
					this._SapPsv = value;
					this.SendPropertyChanged("SapPsv");
					this.OnSapPsvChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PsvApplication", DbType="VarChar(50)")]
		public string PsvApplication
		{
			get
			{
				return this._PsvApplication;
			}
			set
			{
				if ((this._PsvApplication != value))
				{
					this.OnPsvApplicationChanging(value);
					this.SendPropertyChanging();
					this._PsvApplication = value;
					this.SendPropertyChanged("PsvApplication");
					this.OnPsvApplicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsolationValve", DbType="Bit")]
		public System.Nullable<bool> IsolationValve
		{
			get
			{
				return this._IsolationValve;
			}
			set
			{
				if ((this._IsolationValve != value))
				{
					this.OnIsolationValveChanging(value);
					this.SendPropertyChanging();
					this._IsolationValve = value;
					this.SendPropertyChanged("IsolationValve");
					this.OnIsolationValveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReliefValveSupport", DbType="Int")]
		public System.Nullable<int> ReliefValveSupport
		{
			get
			{
				return this._ReliefValveSupport;
			}
			set
			{
				if ((this._ReliefValveSupport != value))
				{
					this.OnReliefValveSupportChanging(value);
					this.SendPropertyChanging();
					this._ReliefValveSupport = value;
					this.SendPropertyChanged("ReliefValveSupport");
					this.OnReliefValveSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestPort", DbType="Bit")]
		public System.Nullable<bool> TestPort
		{
			get
			{
				return this._TestPort;
			}
			set
			{
				if ((this._TestPort != value))
				{
					this.OnTestPortChanging(value);
					this.SendPropertyChanging();
					this._TestPort = value;
					this.SendPropertyChanged("TestPort");
					this.OnTestPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeatherCap", DbType="Int")]
		public System.Nullable<int> WeatherCap
		{
			get
			{
				return this._WeatherCap;
			}
			set
			{
				if ((this._WeatherCap != value))
				{
					this.OnWeatherCapChanging(value);
					this.SendPropertyChanging();
					this._WeatherCap = value;
					this.SendPropertyChanged("WeatherCap");
					this.OnWeatherCapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DotLocation", DbType="Bit")]
		public System.Nullable<bool> DotLocation
		{
			get
			{
				return this._DotLocation;
			}
			set
			{
				if ((this._DotLocation != value))
				{
					this.OnDotLocationChanging(value);
					this.SendPropertyChanging();
					this._DotLocation = value;
					this.SendPropertyChanged("DotLocation");
					this.OnDotLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JsaComplete", DbType="Bit NOT NULL")]
		public bool JsaComplete
		{
			get
			{
				return this._JsaComplete;
			}
			set
			{
				if ((this._JsaComplete != value))
				{
					this.OnJsaCompleteChanging(value);
					this.SendPropertyChanging();
					this._JsaComplete = value;
					this.SendPropertyChanged("JsaComplete");
					this.OnJsaCompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewItems", DbType="VarChar(500)")]
		public string ReviewItems
		{
			get
			{
				return this._ReviewItems;
			}
			set
			{
				if ((this._ReviewItems != value))
				{
					this.OnReviewItemsChanging(value);
					this.SendPropertyChanging();
					this._ReviewItems = value;
					this.SendPropertyChanged("ReviewItems");
					this.OnReviewItemsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._Employee2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_ValveTest", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.ValveTests.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.ValveTests.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="List_ValveTest", Storage="_List", ThisKey="CapacityTypeID", OtherKey="ListID", IsForeignKey=true)]
		public List List
		{
			get
			{
				return this._List.Entity;
			}
			set
			{
				List previousValue = this._List.Entity;
				if (((previousValue != value) 
							|| (this._List.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._List.Entity = null;
						previousValue.ValveTests.Remove(this);
					}
					this._List.Entity = value;
					if ((value != null))
					{
						value.ValveTests.Add(this);
						this._CapacityTypeID = value.ListID;
					}
					else
					{
						this._CapacityTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("List");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_ValveTest", Storage="_ServiceItem", ThisKey="ServiceItemID", OtherKey="ServiceItemID", IsForeignKey=true)]
		public ServiceItem ServiceItem
		{
			get
			{
				return this._ServiceItem.Entity;
			}
			set
			{
				ServiceItem previousValue = this._ServiceItem.Entity;
				if (((previousValue != value) 
							|| (this._ServiceItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceItem.Entity = null;
						previousValue.ValveTests.Remove(this);
					}
					this._ServiceItem.Entity = value;
					if ((value != null))
					{
						value.ValveTests.Add(this);
						this._ServiceItemID = value.ServiceItemID;
					}
					else
					{
						this._ServiceItemID = default(int);
					}
					this.SendPropertyChanged("ServiceItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestResult_ValveTest", Storage="_TestResult", ThisKey="TestResultID", OtherKey="TestResultID", IsForeignKey=true)]
		public TestResult TestResult
		{
			get
			{
				return this._TestResult.Entity;
			}
			set
			{
				TestResult previousValue = this._TestResult.Entity;
				if (((previousValue != value) 
							|| (this._TestResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestResult.Entity = null;
						previousValue.ValveTests.Remove(this);
					}
					this._TestResult.Entity = value;
					if ((value != null))
					{
						value.ValveTests.Add(this);
						this._TestResultID = value.TestResultID;
					}
					else
					{
						this._TestResultID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestResult");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ValveTest", Storage="_Employee", ThisKey="TechID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ValveTests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ValveTests.Add(this);
						this._TechID = value.EmployeeID;
					}
					else
					{
						this._TechID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ValveTest1", Storage="_Employee1", ThisKey="CreatedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.ValveTests1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.ValveTests1.Add(this);
						this._CreatedBy = value.EmployeeID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ValveTest2", Storage="_Employee2", ThisKey="ModifiedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee2
		{
			get
			{
				return this._Employee2.Entity;
			}
			set
			{
				Employee previousValue = this._Employee2.Entity;
				if (((previousValue != value) 
							|| (this._Employee2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee2.Entity = null;
						previousValue.ValveTests2.Remove(this);
					}
					this._Employee2.Entity = value;
					if ((value != null))
					{
						value.ValveTests2.Add(this);
						this._ModifiedBy = value.EmployeeID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WellSafetyTests")]
	public partial class WellSafetyTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WellSafetyTestID;
		
		private int _JobID;
		
		private int _ServiceItemID;
		
		private string _FSR_Num;
		
		private string _SSV_SAP_Num;
		
		private System.Nullable<System.DateTime> _FormDate;
		
		private string _BodyMaterial;
		
		private string _PlugMaterial;
		
		private string _SteamMaterial;
		
		private string _GateMaterial;
		
		private string _PortSize;
		
		private string _PressClass;
		
		private string _ActuatorType;
		
		private string _ActuatorModel;
		
		private string _ActuatorSerialNum;
		
		private System.Nullable<char> _AirSupplyMedium;
		
		private string _Condition;
		
		private System.Nullable<System.DateTime> _DateManufactured;
		
		private string _SystemLocation;
		
		private string _ControllerType;
		
		private string _HI;
		
		private string _LO;
		
		private string _Notes;
		
		private string _CustomerWitness;
		
		private string _ManualOverride;
		
		private System.Nullable<int> _TestResultID;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private byte[] _Version;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<ServiceItem> _ServiceItem;
		
		private EntityRef<TestResult> _TestResult;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWellSafetyTestIDChanging(int value);
    partial void OnWellSafetyTestIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnServiceItemIDChanging(int value);
    partial void OnServiceItemIDChanged();
    partial void OnFSR_NumChanging(string value);
    partial void OnFSR_NumChanged();
    partial void OnSSV_SAP_NumChanging(string value);
    partial void OnSSV_SAP_NumChanged();
    partial void OnFormDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFormDateChanged();
    partial void OnBodyMaterialChanging(string value);
    partial void OnBodyMaterialChanged();
    partial void OnPlugMaterialChanging(string value);
    partial void OnPlugMaterialChanged();
    partial void OnSteamMaterialChanging(string value);
    partial void OnSteamMaterialChanged();
    partial void OnGateMaterialChanging(string value);
    partial void OnGateMaterialChanged();
    partial void OnPortSizeChanging(string value);
    partial void OnPortSizeChanged();
    partial void OnPressClassChanging(string value);
    partial void OnPressClassChanged();
    partial void OnActuatorTypeChanging(string value);
    partial void OnActuatorTypeChanged();
    partial void OnActuatorModelChanging(string value);
    partial void OnActuatorModelChanged();
    partial void OnActuatorSerialNumChanging(string value);
    partial void OnActuatorSerialNumChanged();
    partial void OnAirSupplyMediumChanging(System.Nullable<char> value);
    partial void OnAirSupplyMediumChanged();
    partial void OnConditionChanging(string value);
    partial void OnConditionChanged();
    partial void OnDateManufacturedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateManufacturedChanged();
    partial void OnSystemLocationChanging(string value);
    partial void OnSystemLocationChanged();
    partial void OnControllerTypeChanging(string value);
    partial void OnControllerTypeChanged();
    partial void OnHIChanging(string value);
    partial void OnHIChanged();
    partial void OnLOChanging(string value);
    partial void OnLOChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCustomerWitnessChanging(string value);
    partial void OnCustomerWitnessChanged();
    partial void OnManualOverrideChanging(string value);
    partial void OnManualOverrideChanged();
    partial void OnTestResultIDChanging(System.Nullable<int> value);
    partial void OnTestResultIDChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public WellSafetyTest()
		{
			this._Job = default(EntityRef<Job>);
			this._ServiceItem = default(EntityRef<ServiceItem>);
			this._TestResult = default(EntityRef<TestResult>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WellSafetyTestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WellSafetyTestID
		{
			get
			{
				return this._WellSafetyTestID;
			}
			set
			{
				if ((this._WellSafetyTestID != value))
				{
					this.OnWellSafetyTestIDChanging(value);
					this.SendPropertyChanging();
					this._WellSafetyTestID = value;
					this.SendPropertyChanged("WellSafetyTestID");
					this.OnWellSafetyTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemID", DbType="Int NOT NULL")]
		public int ServiceItemID
		{
			get
			{
				return this._ServiceItemID;
			}
			set
			{
				if ((this._ServiceItemID != value))
				{
					if (this._ServiceItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceItemIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemID = value;
					this.SendPropertyChanged("ServiceItemID");
					this.OnServiceItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSR_Num", DbType="VarChar(50)")]
		public string FSR_Num
		{
			get
			{
				return this._FSR_Num;
			}
			set
			{
				if ((this._FSR_Num != value))
				{
					this.OnFSR_NumChanging(value);
					this.SendPropertyChanging();
					this._FSR_Num = value;
					this.SendPropertyChanged("FSR_Num");
					this.OnFSR_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSV_SAP_Num", DbType="VarChar(50)")]
		public string SSV_SAP_Num
		{
			get
			{
				return this._SSV_SAP_Num;
			}
			set
			{
				if ((this._SSV_SAP_Num != value))
				{
					this.OnSSV_SAP_NumChanging(value);
					this.SendPropertyChanging();
					this._SSV_SAP_Num = value;
					this.SendPropertyChanged("SSV_SAP_Num");
					this.OnSSV_SAP_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> FormDate
		{
			get
			{
				return this._FormDate;
			}
			set
			{
				if ((this._FormDate != value))
				{
					this.OnFormDateChanging(value);
					this.SendPropertyChanging();
					this._FormDate = value;
					this.SendPropertyChanged("FormDate");
					this.OnFormDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BodyMaterial", DbType="VarChar(2)")]
		public string BodyMaterial
		{
			get
			{
				return this._BodyMaterial;
			}
			set
			{
				if ((this._BodyMaterial != value))
				{
					this.OnBodyMaterialChanging(value);
					this.SendPropertyChanging();
					this._BodyMaterial = value;
					this.SendPropertyChanged("BodyMaterial");
					this.OnBodyMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlugMaterial", DbType="VarChar(2)")]
		public string PlugMaterial
		{
			get
			{
				return this._PlugMaterial;
			}
			set
			{
				if ((this._PlugMaterial != value))
				{
					this.OnPlugMaterialChanging(value);
					this.SendPropertyChanging();
					this._PlugMaterial = value;
					this.SendPropertyChanged("PlugMaterial");
					this.OnPlugMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamMaterial", DbType="VarChar(2)")]
		public string SteamMaterial
		{
			get
			{
				return this._SteamMaterial;
			}
			set
			{
				if ((this._SteamMaterial != value))
				{
					this.OnSteamMaterialChanging(value);
					this.SendPropertyChanging();
					this._SteamMaterial = value;
					this.SendPropertyChanged("SteamMaterial");
					this.OnSteamMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GateMaterial", DbType="VarChar(2)")]
		public string GateMaterial
		{
			get
			{
				return this._GateMaterial;
			}
			set
			{
				if ((this._GateMaterial != value))
				{
					this.OnGateMaterialChanging(value);
					this.SendPropertyChanging();
					this._GateMaterial = value;
					this.SendPropertyChanged("GateMaterial");
					this.OnGateMaterialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortSize", DbType="VarChar(50)")]
		public string PortSize
		{
			get
			{
				return this._PortSize;
			}
			set
			{
				if ((this._PortSize != value))
				{
					this.OnPortSizeChanging(value);
					this.SendPropertyChanging();
					this._PortSize = value;
					this.SendPropertyChanged("PortSize");
					this.OnPortSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PressClass", DbType="VarChar(50)")]
		public string PressClass
		{
			get
			{
				return this._PressClass;
			}
			set
			{
				if ((this._PressClass != value))
				{
					this.OnPressClassChanging(value);
					this.SendPropertyChanging();
					this._PressClass = value;
					this.SendPropertyChanged("PressClass");
					this.OnPressClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActuatorType", DbType="VarChar(2)")]
		public string ActuatorType
		{
			get
			{
				return this._ActuatorType;
			}
			set
			{
				if ((this._ActuatorType != value))
				{
					this.OnActuatorTypeChanging(value);
					this.SendPropertyChanging();
					this._ActuatorType = value;
					this.SendPropertyChanged("ActuatorType");
					this.OnActuatorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActuatorModel", DbType="VarChar(50)")]
		public string ActuatorModel
		{
			get
			{
				return this._ActuatorModel;
			}
			set
			{
				if ((this._ActuatorModel != value))
				{
					this.OnActuatorModelChanging(value);
					this.SendPropertyChanging();
					this._ActuatorModel = value;
					this.SendPropertyChanged("ActuatorModel");
					this.OnActuatorModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActuatorSerialNum", DbType="VarChar(50)")]
		public string ActuatorSerialNum
		{
			get
			{
				return this._ActuatorSerialNum;
			}
			set
			{
				if ((this._ActuatorSerialNum != value))
				{
					this.OnActuatorSerialNumChanging(value);
					this.SendPropertyChanging();
					this._ActuatorSerialNum = value;
					this.SendPropertyChanged("ActuatorSerialNum");
					this.OnActuatorSerialNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirSupplyMedium", DbType="VarChar(1)")]
		public System.Nullable<char> AirSupplyMedium
		{
			get
			{
				return this._AirSupplyMedium;
			}
			set
			{
				if ((this._AirSupplyMedium != value))
				{
					this.OnAirSupplyMediumChanging(value);
					this.SendPropertyChanging();
					this._AirSupplyMedium = value;
					this.SendPropertyChanged("AirSupplyMedium");
					this.OnAirSupplyMediumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condition", DbType="VarChar(50)")]
		public string Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateManufactured", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateManufactured
		{
			get
			{
				return this._DateManufactured;
			}
			set
			{
				if ((this._DateManufactured != value))
				{
					this.OnDateManufacturedChanging(value);
					this.SendPropertyChanging();
					this._DateManufactured = value;
					this.SendPropertyChanged("DateManufactured");
					this.OnDateManufacturedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemLocation", DbType="VarChar(3)")]
		public string SystemLocation
		{
			get
			{
				return this._SystemLocation;
			}
			set
			{
				if ((this._SystemLocation != value))
				{
					this.OnSystemLocationChanging(value);
					this.SendPropertyChanging();
					this._SystemLocation = value;
					this.SendPropertyChanged("SystemLocation");
					this.OnSystemLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControllerType", DbType="VarChar(50)")]
		public string ControllerType
		{
			get
			{
				return this._ControllerType;
			}
			set
			{
				if ((this._ControllerType != value))
				{
					this.OnControllerTypeChanging(value);
					this.SendPropertyChanging();
					this._ControllerType = value;
					this.SendPropertyChanged("ControllerType");
					this.OnControllerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HI", DbType="VarChar(50)")]
		public string HI
		{
			get
			{
				return this._HI;
			}
			set
			{
				if ((this._HI != value))
				{
					this.OnHIChanging(value);
					this.SendPropertyChanging();
					this._HI = value;
					this.SendPropertyChanged("HI");
					this.OnHIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LO", DbType="VarChar(50)")]
		public string LO
		{
			get
			{
				return this._LO;
			}
			set
			{
				if ((this._LO != value))
				{
					this.OnLOChanging(value);
					this.SendPropertyChanging();
					this._LO = value;
					this.SendPropertyChanged("LO");
					this.OnLOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2000)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerWitness", DbType="VarChar(50)")]
		public string CustomerWitness
		{
			get
			{
				return this._CustomerWitness;
			}
			set
			{
				if ((this._CustomerWitness != value))
				{
					this.OnCustomerWitnessChanging(value);
					this.SendPropertyChanging();
					this._CustomerWitness = value;
					this.SendPropertyChanged("CustomerWitness");
					this.OnCustomerWitnessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualOverride", DbType="VarChar(3)")]
		public string ManualOverride
		{
			get
			{
				return this._ManualOverride;
			}
			set
			{
				if ((this._ManualOverride != value))
				{
					this.OnManualOverrideChanging(value);
					this.SendPropertyChanging();
					this._ManualOverride = value;
					this.SendPropertyChanged("ManualOverride");
					this.OnManualOverrideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestResultID", DbType="Int")]
		public System.Nullable<int> TestResultID
		{
			get
			{
				return this._TestResultID;
			}
			set
			{
				if ((this._TestResultID != value))
				{
					if (this._TestResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestResultIDChanging(value);
					this.SendPropertyChanging();
					this._TestResultID = value;
					this.SendPropertyChanged("TestResultID");
					this.OnTestResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_WellSafetyTest", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.WellSafetyTests.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.WellSafetyTests.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_WellSafetyTest", Storage="_ServiceItem", ThisKey="ServiceItemID", OtherKey="ServiceItemID", IsForeignKey=true)]
		public ServiceItem ServiceItem
		{
			get
			{
				return this._ServiceItem.Entity;
			}
			set
			{
				ServiceItem previousValue = this._ServiceItem.Entity;
				if (((previousValue != value) 
							|| (this._ServiceItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceItem.Entity = null;
						previousValue.WellSafetyTests.Remove(this);
					}
					this._ServiceItem.Entity = value;
					if ((value != null))
					{
						value.WellSafetyTests.Add(this);
						this._ServiceItemID = value.ServiceItemID;
					}
					else
					{
						this._ServiceItemID = default(int);
					}
					this.SendPropertyChanged("ServiceItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestResult_WellSafetyTest", Storage="_TestResult", ThisKey="TestResultID", OtherKey="TestResultID", IsForeignKey=true)]
		public TestResult TestResult
		{
			get
			{
				return this._TestResult.Entity;
			}
			set
			{
				TestResult previousValue = this._TestResult.Entity;
				if (((previousValue != value) 
							|| (this._TestResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestResult.Entity = null;
						previousValue.WellSafetyTests.Remove(this);
					}
					this._TestResult.Entity = value;
					if ((value != null))
					{
						value.WellSafetyTests.Add(this);
						this._TestResultID = value.TestResultID;
					}
					else
					{
						this._TestResultID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestResult");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WellSafetyTest", Storage="_Employee", ThisKey="ModifiedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WellSafetyTests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WellSafetyTests.Add(this);
						this._ModifiedBy = value.EmployeeID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WellSafetyTest1", Storage="_Employee1", ThisKey="CreatedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.WellSafetyTests1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.WellSafetyTests1.Add(this);
						this._CreatedBy = value.EmployeeID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private System.Nullable<int> _UserId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _WorkPhone;
		
		private string _CellPhone;
		
		private string _Email;
		
		private int _EFC_LocationID;
		
		private bool _Active;
		
		private byte[] _Version;
		
		private EntitySet<GreasingRecordItem> _GreasingRecordItems;
		
		private EntitySet<GreasingRecord> _GreasingRecords;
		
		private EntitySet<GreasingRecord> _GreasingRecords1;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<Job> _Jobs1;
		
		private EntitySet<Job> _Jobs2;
		
		private EntitySet<Job> _Jobs3;
		
		private EntitySet<Job> _Jobs4;
		
		private EntitySet<ValveTest> _ValveTests;
		
		private EntitySet<ValveTest> _ValveTests1;
		
		private EntitySet<ValveTest> _ValveTests2;
		
		private EntitySet<WellSafetyTest> _WellSafetyTests;
		
		private EntitySet<WellSafetyTest> _WellSafetyTests1;
		
		private EntitySet<ChemicalPumpTest> _ChemicalPumpTests;
		
		private EntitySet<ChemicalPumpTest> _ChemicalPumpTests1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEFC_LocationIDChanging(int value);
    partial void OnEFC_LocationIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public Employee()
		{
			this._GreasingRecordItems = new EntitySet<GreasingRecordItem>(new Action<GreasingRecordItem>(this.attach_GreasingRecordItems), new Action<GreasingRecordItem>(this.detach_GreasingRecordItems));
			this._GreasingRecords = new EntitySet<GreasingRecord>(new Action<GreasingRecord>(this.attach_GreasingRecords), new Action<GreasingRecord>(this.detach_GreasingRecords));
			this._GreasingRecords1 = new EntitySet<GreasingRecord>(new Action<GreasingRecord>(this.attach_GreasingRecords1), new Action<GreasingRecord>(this.detach_GreasingRecords1));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._Jobs1 = new EntitySet<Job>(new Action<Job>(this.attach_Jobs1), new Action<Job>(this.detach_Jobs1));
			this._Jobs2 = new EntitySet<Job>(new Action<Job>(this.attach_Jobs2), new Action<Job>(this.detach_Jobs2));
			this._Jobs3 = new EntitySet<Job>(new Action<Job>(this.attach_Jobs3), new Action<Job>(this.detach_Jobs3));
			this._Jobs4 = new EntitySet<Job>(new Action<Job>(this.attach_Jobs4), new Action<Job>(this.detach_Jobs4));
			this._ValveTests = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests), new Action<ValveTest>(this.detach_ValveTests));
			this._ValveTests1 = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests1), new Action<ValveTest>(this.detach_ValveTests1));
			this._ValveTests2 = new EntitySet<ValveTest>(new Action<ValveTest>(this.attach_ValveTests2), new Action<ValveTest>(this.detach_ValveTests2));
			this._WellSafetyTests = new EntitySet<WellSafetyTest>(new Action<WellSafetyTest>(this.attach_WellSafetyTests), new Action<WellSafetyTest>(this.detach_WellSafetyTests));
			this._WellSafetyTests1 = new EntitySet<WellSafetyTest>(new Action<WellSafetyTest>(this.attach_WellSafetyTests1), new Action<WellSafetyTest>(this.detach_WellSafetyTests1));
			this._ChemicalPumpTests = new EntitySet<ChemicalPumpTest>(new Action<ChemicalPumpTest>(this.attach_ChemicalPumpTests), new Action<ChemicalPumpTest>(this.detach_ChemicalPumpTests));
			this._ChemicalPumpTests1 = new EntitySet<ChemicalPumpTest>(new Action<ChemicalPumpTest>(this.attach_ChemicalPumpTests1), new Action<ChemicalPumpTest>(this.detach_ChemicalPumpTests1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="VarChar(50)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(50)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EFC_LocationID", DbType="Int NOT NULL")]
		public int EFC_LocationID
		{
			get
			{
				return this._EFC_LocationID;
			}
			set
			{
				if ((this._EFC_LocationID != value))
				{
					this.OnEFC_LocationIDChanging(value);
					this.SendPropertyChanging();
					this._EFC_LocationID = value;
					this.SendPropertyChanged("EFC_LocationID");
					this.OnEFC_LocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Timestamp NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GreasingRecordItem", Storage="_GreasingRecordItems", ThisKey="EmployeeID", OtherKey="ModifiedBy")]
		public EntitySet<GreasingRecordItem> GreasingRecordItems
		{
			get
			{
				return this._GreasingRecordItems;
			}
			set
			{
				this._GreasingRecordItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GreasingRecord", Storage="_GreasingRecords", ThisKey="EmployeeID", OtherKey="CreatedBy")]
		public EntitySet<GreasingRecord> GreasingRecords
		{
			get
			{
				return this._GreasingRecords;
			}
			set
			{
				this._GreasingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GreasingRecord1", Storage="_GreasingRecords1", ThisKey="EmployeeID", OtherKey="ModifiedBy")]
		public EntitySet<GreasingRecord> GreasingRecords1
		{
			get
			{
				return this._GreasingRecords1;
			}
			set
			{
				this._GreasingRecords1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job", Storage="_Jobs", ThisKey="EmployeeID", OtherKey="RequestedByID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job1", Storage="_Jobs1", ThisKey="EmployeeID", OtherKey="CreatedBy")]
		public EntitySet<Job> Jobs1
		{
			get
			{
				return this._Jobs1;
			}
			set
			{
				this._Jobs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job2", Storage="_Jobs2", ThisKey="EmployeeID", OtherKey="AssignedByID")]
		public EntitySet<Job> Jobs2
		{
			get
			{
				return this._Jobs2;
			}
			set
			{
				this._Jobs2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job3", Storage="_Jobs3", ThisKey="EmployeeID", OtherKey="AssignedToID")]
		public EntitySet<Job> Jobs3
		{
			get
			{
				return this._Jobs3;
			}
			set
			{
				this._Jobs3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Job4", Storage="_Jobs4", ThisKey="EmployeeID", OtherKey="ApprovedByID")]
		public EntitySet<Job> Jobs4
		{
			get
			{
				return this._Jobs4;
			}
			set
			{
				this._Jobs4.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ValveTest", Storage="_ValveTests", ThisKey="EmployeeID", OtherKey="TechID")]
		public EntitySet<ValveTest> ValveTests
		{
			get
			{
				return this._ValveTests;
			}
			set
			{
				this._ValveTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ValveTest1", Storage="_ValveTests1", ThisKey="EmployeeID", OtherKey="CreatedBy")]
		public EntitySet<ValveTest> ValveTests1
		{
			get
			{
				return this._ValveTests1;
			}
			set
			{
				this._ValveTests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ValveTest2", Storage="_ValveTests2", ThisKey="EmployeeID", OtherKey="ModifiedBy")]
		public EntitySet<ValveTest> ValveTests2
		{
			get
			{
				return this._ValveTests2;
			}
			set
			{
				this._ValveTests2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WellSafetyTest", Storage="_WellSafetyTests", ThisKey="EmployeeID", OtherKey="ModifiedBy")]
		public EntitySet<WellSafetyTest> WellSafetyTests
		{
			get
			{
				return this._WellSafetyTests;
			}
			set
			{
				this._WellSafetyTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WellSafetyTest1", Storage="_WellSafetyTests1", ThisKey="EmployeeID", OtherKey="CreatedBy")]
		public EntitySet<WellSafetyTest> WellSafetyTests1
		{
			get
			{
				return this._WellSafetyTests1;
			}
			set
			{
				this._WellSafetyTests1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChemicalPumpTest", Storage="_ChemicalPumpTests", ThisKey="EmployeeID", OtherKey="CreatedBy")]
		public EntitySet<ChemicalPumpTest> ChemicalPumpTests
		{
			get
			{
				return this._ChemicalPumpTests;
			}
			set
			{
				this._ChemicalPumpTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChemicalPumpTest1", Storage="_ChemicalPumpTests1", ThisKey="EmployeeID", OtherKey="ModifiedBy")]
		public EntitySet<ChemicalPumpTest> ChemicalPumpTests1
		{
			get
			{
				return this._ChemicalPumpTests1;
			}
			set
			{
				this._ChemicalPumpTests1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GreasingRecordItems(GreasingRecordItem entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_GreasingRecordItems(GreasingRecordItem entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_GreasingRecords(GreasingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_GreasingRecords(GreasingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_GreasingRecords1(GreasingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_GreasingRecords1(GreasingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Jobs1(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Jobs1(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Jobs2(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee2 = this;
		}
		
		private void detach_Jobs2(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee2 = null;
		}
		
		private void attach_Jobs3(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee3 = this;
		}
		
		private void detach_Jobs3(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee3 = null;
		}
		
		private void attach_Jobs4(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee4 = this;
		}
		
		private void detach_Jobs4(Job entity)
		{
			this.SendPropertyChanging();
			entity.Employee4 = null;
		}
		
		private void attach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ValveTests(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ValveTests1(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_ValveTests1(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_ValveTests2(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee2 = this;
		}
		
		private void detach_ValveTests2(ValveTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee2 = null;
		}
		
		private void attach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WellSafetyTests(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_WellSafetyTests1(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_WellSafetyTests1(WellSafetyTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_ChemicalPumpTests(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_ChemicalPumpTests(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_ChemicalPumpTests1(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_ChemicalPumpTests1(ChemicalPumpTest entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChemicalPumpTests")]
	public partial class ChemicalPumpTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChemicalPumpTestID;
		
		private int _JobID;
		
		private string _FSR_Num;
		
		private System.Nullable<int> _ServiceItemID;
		
		private string _Contact;
		
		private string _Phone;
		
		private string _ChemicalBeingPumped;
		
		private System.Nullable<double> _PumpVolumeSetting;
		
		private System.Nullable<double> _Voltage;
		
		private System.Nullable<double> _SolarPanelWattage;
		
		private System.Nullable<decimal> _HeadSize;
		
		private System.Nullable<double> _SupplyPressure;
		
		private System.Nullable<double> _DischargePressure;
		
		private System.Nullable<double> _FlowlinePressure;
		
		private System.Nullable<double> _TubingPressure;
		
		private System.Nullable<double> _CasingPressure;
		
		private System.Nullable<double> _PipelinePressure;
		
		private string _Notes;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private byte[] _Version;
		
		private EntityRef<ServiceItem> _ServiceItem;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChemicalPumpTestIDChanging(int value);
    partial void OnChemicalPumpTestIDChanged();
    partial void OnJobIDChanging(int value);
    partial void OnJobIDChanged();
    partial void OnFSR_NumChanging(string value);
    partial void OnFSR_NumChanged();
    partial void OnServiceItemIDChanging(System.Nullable<int> value);
    partial void OnServiceItemIDChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnChemicalBeingPumpedChanging(string value);
    partial void OnChemicalBeingPumpedChanged();
    partial void OnPumpVolumeSettingChanging(System.Nullable<double> value);
    partial void OnPumpVolumeSettingChanged();
    partial void OnVoltageChanging(System.Nullable<double> value);
    partial void OnVoltageChanged();
    partial void OnSolarPanelWattageChanging(System.Nullable<double> value);
    partial void OnSolarPanelWattageChanged();
    partial void OnHeadSizeChanging(System.Nullable<decimal> value);
    partial void OnHeadSizeChanged();
    partial void OnSupplyPressureChanging(System.Nullable<double> value);
    partial void OnSupplyPressureChanged();
    partial void OnDischargePressureChanging(System.Nullable<double> value);
    partial void OnDischargePressureChanged();
    partial void OnFlowlinePressureChanging(System.Nullable<double> value);
    partial void OnFlowlinePressureChanged();
    partial void OnTubingPressureChanging(System.Nullable<double> value);
    partial void OnTubingPressureChanged();
    partial void OnCasingPressureChanging(System.Nullable<double> value);
    partial void OnCasingPressureChanged();
    partial void OnPipelinePressureChanging(System.Nullable<double> value);
    partial void OnPipelinePressureChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifiedByChanging(System.Nullable<int> value);
    partial void OnModifiedByChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnVersionChanging(byte[] value);
    partial void OnVersionChanged();
    #endregion
		
		public ChemicalPumpTest()
		{
			this._ServiceItem = default(EntityRef<ServiceItem>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChemicalPumpTestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChemicalPumpTestID
		{
			get
			{
				return this._ChemicalPumpTestID;
			}
			set
			{
				if ((this._ChemicalPumpTestID != value))
				{
					this.OnChemicalPumpTestIDChanging(value);
					this.SendPropertyChanging();
					this._ChemicalPumpTestID = value;
					this.SendPropertyChanged("ChemicalPumpTestID");
					this.OnChemicalPumpTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSR_Num", DbType="VarChar(50)")]
		public string FSR_Num
		{
			get
			{
				return this._FSR_Num;
			}
			set
			{
				if ((this._FSR_Num != value))
				{
					this.OnFSR_NumChanging(value);
					this.SendPropertyChanging();
					this._FSR_Num = value;
					this.SendPropertyChanged("FSR_Num");
					this.OnFSR_NumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceItemID", DbType="Int")]
		public System.Nullable<int> ServiceItemID
		{
			get
			{
				return this._ServiceItemID;
			}
			set
			{
				if ((this._ServiceItemID != value))
				{
					if (this._ServiceItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceItemIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceItemID = value;
					this.SendPropertyChanged("ServiceItemID");
					this.OnServiceItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="VarChar(50)")]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChemicalBeingPumped", DbType="VarChar(255)")]
		public string ChemicalBeingPumped
		{
			get
			{
				return this._ChemicalBeingPumped;
			}
			set
			{
				if ((this._ChemicalBeingPumped != value))
				{
					this.OnChemicalBeingPumpedChanging(value);
					this.SendPropertyChanging();
					this._ChemicalBeingPumped = value;
					this.SendPropertyChanged("ChemicalBeingPumped");
					this.OnChemicalBeingPumpedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PumpVolumeSetting", DbType="Float")]
		public System.Nullable<double> PumpVolumeSetting
		{
			get
			{
				return this._PumpVolumeSetting;
			}
			set
			{
				if ((this._PumpVolumeSetting != value))
				{
					this.OnPumpVolumeSettingChanging(value);
					this.SendPropertyChanging();
					this._PumpVolumeSetting = value;
					this.SendPropertyChanged("PumpVolumeSetting");
					this.OnPumpVolumeSettingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voltage", DbType="Float")]
		public System.Nullable<double> Voltage
		{
			get
			{
				return this._Voltage;
			}
			set
			{
				if ((this._Voltage != value))
				{
					this.OnVoltageChanging(value);
					this.SendPropertyChanging();
					this._Voltage = value;
					this.SendPropertyChanged("Voltage");
					this.OnVoltageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SolarPanelWattage", DbType="Float")]
		public System.Nullable<double> SolarPanelWattage
		{
			get
			{
				return this._SolarPanelWattage;
			}
			set
			{
				if ((this._SolarPanelWattage != value))
				{
					this.OnSolarPanelWattageChanging(value);
					this.SendPropertyChanging();
					this._SolarPanelWattage = value;
					this.SendPropertyChanged("SolarPanelWattage");
					this.OnSolarPanelWattageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadSize", DbType="Decimal(9,5)")]
		public System.Nullable<decimal> HeadSize
		{
			get
			{
				return this._HeadSize;
			}
			set
			{
				if ((this._HeadSize != value))
				{
					this.OnHeadSizeChanging(value);
					this.SendPropertyChanging();
					this._HeadSize = value;
					this.SendPropertyChanged("HeadSize");
					this.OnHeadSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyPressure", DbType="Float")]
		public System.Nullable<double> SupplyPressure
		{
			get
			{
				return this._SupplyPressure;
			}
			set
			{
				if ((this._SupplyPressure != value))
				{
					this.OnSupplyPressureChanging(value);
					this.SendPropertyChanging();
					this._SupplyPressure = value;
					this.SendPropertyChanged("SupplyPressure");
					this.OnSupplyPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DischargePressure", DbType="Float")]
		public System.Nullable<double> DischargePressure
		{
			get
			{
				return this._DischargePressure;
			}
			set
			{
				if ((this._DischargePressure != value))
				{
					this.OnDischargePressureChanging(value);
					this.SendPropertyChanging();
					this._DischargePressure = value;
					this.SendPropertyChanged("DischargePressure");
					this.OnDischargePressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlowlinePressure", DbType="Float")]
		public System.Nullable<double> FlowlinePressure
		{
			get
			{
				return this._FlowlinePressure;
			}
			set
			{
				if ((this._FlowlinePressure != value))
				{
					this.OnFlowlinePressureChanging(value);
					this.SendPropertyChanging();
					this._FlowlinePressure = value;
					this.SendPropertyChanged("FlowlinePressure");
					this.OnFlowlinePressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TubingPressure", DbType="Float")]
		public System.Nullable<double> TubingPressure
		{
			get
			{
				return this._TubingPressure;
			}
			set
			{
				if ((this._TubingPressure != value))
				{
					this.OnTubingPressureChanging(value);
					this.SendPropertyChanging();
					this._TubingPressure = value;
					this.SendPropertyChanged("TubingPressure");
					this.OnTubingPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CasingPressure", DbType="Float")]
		public System.Nullable<double> CasingPressure
		{
			get
			{
				return this._CasingPressure;
			}
			set
			{
				if ((this._CasingPressure != value))
				{
					this.OnCasingPressureChanging(value);
					this.SendPropertyChanging();
					this._CasingPressure = value;
					this.SendPropertyChanged("CasingPressure");
					this.OnCasingPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PipelinePressure", DbType="Float")]
		public System.Nullable<double> PipelinePressure
		{
			get
			{
				return this._PipelinePressure;
			}
			set
			{
				if ((this._PipelinePressure != value))
				{
					this.OnPipelinePressureChanging(value);
					this.SendPropertyChanging();
					this._PipelinePressure = value;
					this.SendPropertyChanged("PipelinePressure");
					this.OnPipelinePressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(2000)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public byte[] Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceItem_ChemicalPumpTest", Storage="_ServiceItem", ThisKey="ServiceItemID", OtherKey="ServiceItemID", IsForeignKey=true)]
		public ServiceItem ServiceItem
		{
			get
			{
				return this._ServiceItem.Entity;
			}
			set
			{
				ServiceItem previousValue = this._ServiceItem.Entity;
				if (((previousValue != value) 
							|| (this._ServiceItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceItem.Entity = null;
						previousValue.ChemicalPumpTests.Remove(this);
					}
					this._ServiceItem.Entity = value;
					if ((value != null))
					{
						value.ChemicalPumpTests.Add(this);
						this._ServiceItemID = value.ServiceItemID;
					}
					else
					{
						this._ServiceItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChemicalPumpTest", Storage="_Employee", ThisKey="CreatedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.ChemicalPumpTests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.ChemicalPumpTests.Add(this);
						this._CreatedBy = value.EmployeeID;
					}
					else
					{
						this._CreatedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_ChemicalPumpTest1", Storage="_Employee1", ThisKey="ModifiedBy", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.ChemicalPumpTests1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.ChemicalPumpTests1.Add(this);
						this._ModifiedBy = value.EmployeeID;
					}
					else
					{
						this._ModifiedBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_ChemicalPumpTest", Storage="_Job", ThisKey="JobID", OtherKey="JobID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.ChemicalPumpTests.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.ChemicalPumpTests.Add(this);
						this._JobID = value.JobID;
					}
					else
					{
						this._JobID = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class ClientLocations_GetAllResult
	{
		
		private int _ClientLocationID;
		
		private string _Name;
		
		public ClientLocations_GetAllResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationID", DbType="Int NOT NULL")]
		public int ClientLocationID
		{
			get
			{
				return this._ClientLocationID;
			}
			set
			{
				if ((this._ClientLocationID != value))
				{
					this._ClientLocationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class ClientLocations_GetByClientResult
	{
		
		private int _ClientLocationID;
		
		private string _Name;
		
		public ClientLocations_GetByClientResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationID", DbType="Int NOT NULL")]
		public int ClientLocationID
		{
			get
			{
				return this._ClientLocationID;
			}
			set
			{
				if ((this._ClientLocationID != value))
				{
					this._ClientLocationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class Clients_GetAllResult
	{
		
		private int _ClientID;
		
		private string _Name;
		
		public Clients_GetAllResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	public partial class CustomerAccounts_GetClientListResult
	{
		
		private System.Nullable<int> _ClientID;
		
		private string _ClientName;
		
		private System.Nullable<int> _ParentID;
		
		private System.Nullable<int> _HierarchyLevel;
		
		public CustomerAccounts_GetClientListResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int")]
		public System.Nullable<int> ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this._ClientID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(50)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HierarchyLevel", DbType="Int")]
		public System.Nullable<int> HierarchyLevel
		{
			get
			{
				return this._HierarchyLevel;
			}
			set
			{
				if ((this._HierarchyLevel != value))
				{
					this._HierarchyLevel = value;
				}
			}
		}
	}
	
	public partial class GreasingRecord_ReportResult
	{
		
		private int _GreasingRecordID;
		
		private int _JobID;
		
		private string _ClientFieldOffice;
		
		private string _PipelineSegment;
		
		private string _Field;
		
		private string _SapWO;
		
		private string _SapEquipNum;
		
		private string _FSRNum;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<int> _ModifiedBy;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private string _ClientName;
		
		private string _ClientLocationName;
		
		private System.Nullable<int> _TechnicianID;
		
		private string _TechnicianDisplay;
		
		private string _SalesOrderNum;
		
		public GreasingRecord_ReportResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreasingRecordID", DbType="Int NOT NULL")]
		public int GreasingRecordID
		{
			get
			{
				return this._GreasingRecordID;
			}
			set
			{
				if ((this._GreasingRecordID != value))
				{
					this._GreasingRecordID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this._JobID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientFieldOffice", DbType="VarChar(50)")]
		public string ClientFieldOffice
		{
			get
			{
				return this._ClientFieldOffice;
			}
			set
			{
				if ((this._ClientFieldOffice != value))
				{
					this._ClientFieldOffice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PipelineSegment", DbType="VarChar(100)")]
		public string PipelineSegment
		{
			get
			{
				return this._PipelineSegment;
			}
			set
			{
				if ((this._PipelineSegment != value))
				{
					this._PipelineSegment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field", DbType="VarChar(50)")]
		public string Field
		{
			get
			{
				return this._Field;
			}
			set
			{
				if ((this._Field != value))
				{
					this._Field = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapWO", DbType="VarChar(50)")]
		public string SapWO
		{
			get
			{
				return this._SapWO;
			}
			set
			{
				if ((this._SapWO != value))
				{
					this._SapWO = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SapEquipNum", DbType="VarChar(50)")]
		public string SapEquipNum
		{
			get
			{
				return this._SapEquipNum;
			}
			set
			{
				if ((this._SapEquipNum != value))
				{
					this._SapEquipNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSRNum", DbType="VarChar(50)")]
		public string FSRNum
		{
			get
			{
				return this._FSRNum;
			}
			set
			{
				if ((this._FSRNum != value))
				{
					this._FSRNum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this._CreatedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedBy", DbType="Int")]
		public System.Nullable<int> ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this._ModifiedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this._ModifiedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this._CompletionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocationName", DbType="VarChar(50)")]
		public string ClientLocationName
		{
			get
			{
				return this._ClientLocationName;
			}
			set
			{
				if ((this._ClientLocationName != value))
				{
					this._ClientLocationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicianID", DbType="Int")]
		public System.Nullable<int> TechnicianID
		{
			get
			{
				return this._TechnicianID;
			}
			set
			{
				if ((this._TechnicianID != value))
				{
					this._TechnicianID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicianDisplay", DbType="VarChar(101) NOT NULL", CanBeNull=false)]
		public string TechnicianDisplay
		{
			get
			{
				return this._TechnicianDisplay;
			}
			set
			{
				if ((this._TechnicianDisplay != value))
				{
					this._TechnicianDisplay = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderNum", DbType="VarChar(50)")]
		public string SalesOrderNum
		{
			get
			{
				return this._SalesOrderNum;
			}
			set
			{
				if ((this._SalesOrderNum != value))
				{
					this._SalesOrderNum = value;
				}
			}
		}
	}
	
	public partial class JobIDListByClientOrLocationResult
	{
		
		private int _JobID;
		
		private string _JobDisplay;
		
		public JobIDListByClientOrLocationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int NOT NULL")]
		public int JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this._JobID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDisplay", DbType="VarChar(50)")]
		public string JobDisplay
		{
			get
			{
				return this._JobDisplay;
			}
			set
			{
				if ((this._JobDisplay != value))
				{
					this._JobDisplay = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
