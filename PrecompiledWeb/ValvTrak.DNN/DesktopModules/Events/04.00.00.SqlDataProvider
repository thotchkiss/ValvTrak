    /************************************************************/
    /*****                                                  *****/
    /*****       SqlDataProvider                            *****/
    /*****       Install/Upgrade for Events module 4.0.0    *****/
    /*****                                                  *****/
    /***** Note: To manually execute this script you must   *****/
    /*****       perform a search AND replace operation     *****/
    /*****       for {databaseOwner} AND {objectQualifier}  *****/
    /*****       or use 'SQL' FROM Host Menu AND run this.  *****/
    /*****                                                  *****/
    /************************************************************/


/*** Drop & update Stored Procs (from 3.3.8) ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByRange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByRange]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGetByRange
(
 @Modules nvarchar(255),
 @BeginDate datetime,
 @EndDate datetime,
 @Category nvarchar(50)
)
AS
SET DATEFORMAT mdy
IF (LEN(@Modules) = 0)
BEGIN
/** Added for Module Notification Scheduling 
 NOTE: This version Solves EndDate issue by Adding 1 day to EndDate for WHERE clause
**/
  SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
 EventTimeBegin, Duration, EventName, EventDesc,
 Importance, E.CreatedDate, 
 CreatedBy = U.DisplayName,
 CreatorID =  E.CreatedBy,
 Every,
 Period,
 RepeatType,
 Notify,
 Approved,
 Signups,
 MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
 EnrollRoleID,
 EnrollFee, 
 EnrollType, 
 PayPalAccount, 
 PayPalPassword, 
 Cancelled,
 ImageURL, 
 ImageType, 
 ImageWidth,
 ImageHeight,
 ImageDisplay,
 E.Location,
 c.LocationName,
 c.MapURL,
 E.Category,
 b.CategoryName,
 b.Color,
 Reminder,
 TimezoneOffset,
 SendReminder,
 ReminderTime,
 ReminderTimeMeasurement,
 ReminderFrom,
 SearchSubmitted,
  (Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle 
  FROM {databaseOwner}{objectQualifier}Events E
  left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
  left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
  left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
  WHERE (((EventTimeBegin <= DATEADD(DAY,1,@EndDate) AND DATEADD(minute,Duration,EventTimeBegin) >= @BeginDate) OR 
                   (EventTimeBegin BETWEEN @BeginDate  AND DATEADD(DAY,1,@EndDate)) OR 
                   (EventTimeBegin <=DATEADD(DAY,1,@EndDate) AND EventDateEnd >= @BeginDate AND RepeatType <> 'N'))
 AND (ModuleID in (SELECT * FROM {databaseOwner}[{objectQualifier}SplitIDs](@Modules)))
 AND (Approved = 1)
 AND (b.CategoryName = @Category OR @Category = ''))
  ORDER BY EventDateBegin, EventTimeBegin, EventDateEnd
END
ELSE
BEGIN
  SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
 EventTimeBegin, Duration, EventName, EventDesc,
 Importance, E.CreatedDate, 
 createdBy = U.DisplayName,
 CreatorID =  E.CreatedBy,
 Every,
 Period,
 RepeatType,
 Notify,
 Approved,
 Signups,
 MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
 EnrollRoleID,
 EnrollFee, 
 EnrollType, 
 PayPalAccount, 
 PayPalPassword, 
 Cancelled,
 ImageURL, 
 ImageType, 
 ImageWidth,
 ImageHeight,
 ImageDisplay,
 E.Location,
 c.LocationName,
 c.MapURL,
 E.Category,
 b.CategoryName,
 b.Color,
 Reminder,
 TimezoneOffset,
 SendReminder,
 ReminderTime,
 ReminderTimeMeasurement,
  (Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle 
  FROM {databaseOwner}{objectQualifier}Events E
  left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
  left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
  left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
  WHERE (((EventTimeBegin <= DATEADD(DAY,1,@EndDate) AND DATEADD(minute,Duration,EventTimeBegin) >= @BeginDate) OR 
                   (EventTimeBegin BETWEEN @BeginDate  AND DATEADD(DAY,1,@EndDate)) OR 
                   (EventTimeBegin <=DATEADD(DAY,1,@EndDate) AND EventDateEnd >= @BeginDate AND RepeatType <> 'N'))
 AND (ModuleID in (SELECT * FROM {databaseOwner}[{objectQualifier}SplitIDs](@Modules)))
 AND (Approved = 1)
 AND (b.CategoryName = @Category OR @Category = ''))
  ORDER BY EventDateBegin, EventTimeBegin, EventDateEnd
END
GO

/** Correcting missing {objectQualifier} **/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}SplitIDs]') and xtype in (N'FN', N'IF', N'TF'))
drop function {databaseOwner}[{objectQualifier}SplitIDs]
GO

CREATE FUNCTION {databaseOwner}{objectQualifier}SplitIDs
(
	@RecordIDList varchar(500)
)
RETURNS 
@ParsedList table
(
	RecordID int
)
AS
BEGIN
	DECLARE @RecordID varchar(10), @Pos int

	SET @RecordIDList = LTRIM(RTRIM(@RecordIDList))+ ','
	SET @Pos = CHARINDEX(',', @RecordIDList, 1)

	IF REPLACE(@RecordIDList, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @RecordID = LTRIM(RTRIM(LEFT(@RecordIDList, @Pos - 1)))
			IF @RecordID <> ''
			BEGIN
				INSERT INTO @ParsedList (RecordID) 
				VALUES (CAST(@RecordID AS int)) --Use Appropriate conversion
			END
			SET @RecordIDList = RIGHT(@RecordIDList, LEN(@RecordIDList) - @Pos)
			SET @Pos = CHARINDEX(',', @RecordIDList, 1)

		END
	END	
	RETURN
END
GO

/** Correct EndTime **/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsMyEnrollments]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsMyEnrollments
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsMyEnrollments
(
	@ModuleID int,
	@UserID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  u.displayName as UserName, u.Email,
  s.EventTimeBegin, DATEADD(mi, c.Duration, s.EventTimeBegin) as EventTimeEnd ,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		c.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Modules m on m.ModuleID = s.ModuleID
   Left Join {databaseOwner}{objectQualifier}TabModules x on m.ModuleID = x.ModuleID
   Left Join {databaseOwner}{objectQualifier}Tabs t on t.TabID = x.TabID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where  s.Userid = @UserID AND
	s.ModuleID = @ModuleID
ORDER BY s.EventTimeBegin desc
GO

/*** Correct EventsNotificationsToSend to take account of timezone in Event***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationsToSend]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationsToSend]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationsToSend
(
	@NotifyTime DateTime
)
AS
SELECT     n.NotificationID, n.EventID, n.PortalAliasID, n.UserEmail, 
                      n.NotificationSent, n.NotifyByDateTime, n.EventTimeBegin, n.NotifyLanguage, 
                      e.TimezoneOffset
FROM         {databaseOwner}[{objectQualifier}EventsNotification] as n INNER JOIN
                      {databaseOwner}[{objectQualifier}Events] as e ON n.EventID = e.EventID AND n.NotifyByDateTime <= DATEADD(minute, e.TimezoneOffset, 
                     @NotifyTime)
WHERE     (n.NotificationSent = 0)
ORDER BY n.NotifyByDateTime

/*** Drop unwanted Stored Procs ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsAVCalendarImport]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsAVCalendarImport]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsAVCalendarList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsAVCalendarList]
GO

/*** Change index to be on EventDateBegin instead of EventDateEnd ***/

if exists (select * from dbo.sysindexes where id = object_id(N'{databaseOwner}[{objectQualifier}Events]') AND name = N'IX_{objectQualifier}Events_1')
drop index {databaseOwner}[{objectQualifier}Events].[IX_{objectQualifier}Events_1]
GO

CREATE  INDEX [IX_{objectQualifier}Events_1] ON {databaseOwner}[{objectQualifier}Events]([EventDateBegin]) ON [PRIMARY]
GO

/*** ******************************** ***/
/*** Correct out of sync Stored Procs ***/
/*** ******************************** ***/

/*** EventsCategoryDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategoryDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategoryDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategoryDelete
(
	@Category int
)
AS
UPDATE {databaseOwner}{objectQualifier}Events SET Category = null WHERE Category = @Category
DELETE {databaseOwner}{objectQualifier}EventsCategory WHERE Category = @Category

GO

/*** EventsCategoryGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategoryGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategoryGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategoryGet
(
	@Category int
)
AS
SELECT Category, PortalID, CategoryName, Color
FROM {databaseOwner}{objectQualifier}EventsCategory
WHERE Category = @Category
GO

/*** EventsCategoryList ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategoryList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategoryList]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategoryList
(
	@PortalID int
)
AS
SELECT Category, PortalID, CategoryName, Color
FROM {databaseOwner}{objectQualifier}EventsCategory
WHERE PortalID = @PortalID
Order By CategoryName
GO

/*** EventsCategorySave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategorySave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategorySave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategorySave
(
	@PortalID int,
	@Category int,
	@CategoryName nvarchar(50),
	@Color varchar(10)
)
AS
IF @Category = 0 OR @Category IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsCategory
	(
		PortalID,
		CategoryName,
		Color
	)
	VALUES
	(
		@PortalID,
		@CategoryName,
		@Color
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsCategory SET
		PortalID = @PortalID,
		CategoryName = @CategoryName,
		Color = @Color
	WHERE Category = @Category
SELECT Category, PortalID, CategoryName, Color
FROM {databaseOwner}{objectQualifier}EventsCategory
WHERE Category = scope_identity()
GO

/*** EventsDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsDelete
(
	@EventID int
)
AS
DELETE {databaseOwner}{objectQualifier}Events WHERE EventID = @EventID
GO

/*** EventsGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGet
(
	@EventID int
)
AS
SET DATEFORMAT mdy
SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
    --CreatedBy = {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {databaseOwner}{objectQualifier}Users.LastName,
    CreatedBy = u.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	E.Location,
	c.LocationName,
	c.MapURL,
	E.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement,
	ReminderFrom,
	SearchSubmitted,
	(Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle 
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE EventID = @EventID
GO

/*** EventsGetByDate ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByDate]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGetByDate
(
	@EventDate datetime,
	@ModuleID int
)
AS
SET DATEFORMAT mdy
SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
    --CreatedBy = U.FirstName + ' ' + U.LastName,
    CreatedBy = U.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	E.Location,
	c.LocationName,
	c.MapURL,
	E.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement,
	ReminderFrom,
	SearchSubmitted
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE ((@EventDate BETWEEN EventDateBegin AND EventDateEnd)
	AND (ModuleID = @ModuleID) 
	AND (Approved = 1))
                       OR 
	((EventDateEnd  >= @EventDate)
	AND (ModuleID = @ModuleID)
	AND (Approved = 1)) 
ORDER BY (SELECT (datepart(hour, EventTimeBegin) * 10000) +
                      (datepart(minute, EventTimeBegin) * 100) +
                      (datepart(second, EventTimeBegin)))

GO

/*** EventsGetByMonthYear ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByMonthYear]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByMonthYear]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGetByMonthYear
(
	@ModuleID int,
	@Month int,
	@Year int
)
AS
SET DATEFORMAT mdy
SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
    --CreatedBy = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
    CreatedBy = U.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	E.Location,
	c.LocationName,
	c.MapURL,
	E.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement,
	ReminderFrom,
	SearchSubmitted
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE ((MONTH(EventDateBegin) = @Month)
	AND (YEAR(EventDateBegin) = @Year)
	AND (ModuleID = @ModuleID) 
	AND (Approved = 1))
                       OR
            ((MONTH(EventDateEnd) = @Month)
	AND (YEAR(EventDateEnd) = @Year)
	AND (ModuleID = @ModuleID)
	AND (Approved = 1))
ORDER BY EventDateBegin,EventDateEnd, (SELECT (datepart(hour, EventTimeBegin) * 10000) +
                      (datepart(minute, EventTimeBegin) * 100) +
                      (datepart(second, EventTimeBegin)))

GO

/*** EventsLocationDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationDelete
(
	@Location int
)
AS
UPDATE {databaseOwner}{objectQualifier}Events SET Location = null  WHERE Location = @Location
DELETE {databaseOwner}{objectQualifier}EventsLocation WHERE Location = @Location
GO

/*** EventsLocationGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationGet
(
	@Location int
)
AS
SELECT Location, PortalID, LocationName, MapURL
FROM {databaseOwner}{objectQualifier}EventsLocation
WHERE Location = @Location
GO

/*** EventsLocationList ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationList]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationList
(
	@PortalID int
)
AS
SELECT Location, PortalID, LocationName, MapURL
FROM {databaseOwner}{objectQualifier}EventsLocation
WHERE PortalID = @PortalID
Order By LocationName
GO

/*** EventsLocationSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationSave
(
	@PortalID int,
	@Location int,
	@LocationName nvarchar(50),
	@MapURL nvarchar(255)
)
AS
IF @Location = 0 OR @Location IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsLocation
	(
		PortalID,
		LocationName,
		MapURL
	)
	VALUES
	(
		@PortalID,
		@LocationName,
		@MapURL
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsLocation SET
		PortalID = @PortalID,
		LocationName = @LocationName,
		MapURL = @MapURL
	WHERE Location = @Location
SELECT Location, PortalID, LocationName, MapURL
FROM {databaseOwner}{objectQualifier}EventsLocation
WHERE Location = scope_identity()
GO

/*** EventsMasterAssignedModules ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterAssignedModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterAssignedModules]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterAssignedModules
(
	@ModuleID int
)
AS
Select a.ModuleID as ModuleID, 0 as PortalID, a.MasterID, a.SubEventID as SubEventID, b.ModuleTitle as SubEventTitle 
from {databaseOwner}{objectQualifier}EventsMaster a
join {databaseOwner}{objectQualifier}Modules b on a.SubEventID = b.ModuleID 
WHERE a.ModuleID = @ModuleID
Group BY b.ModuleTitle, a.MasterID, a.ModuleID, a.SubEventID  
Order By b.ModuleTitle
GO

/*** EventsMasterAvailableModules ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterAvailableModules]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterAvailableModules]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterAvailableModules
(
	@PortalID int,
	@ModuleID int
)
AS
Select @ModuleID as ModuleID, c.PortalID, 0 as MasterID, a.ModuleID as SubEventID, a.ModuleTitle as SubEventTitle 
from {databaseOwner}{objectQualifier}Modules a
  left join {databaseOwner}{objectQualifier}ModuleDefinitions b on a.ModuleDefID = b.ModuleDefID 
  left join {databaseOwner}{objectQualifier}DesktopModules d on b.DesktopModuleID = d.DesktopModuleID
  left join {databaseOwner}{objectQualifier}TabModules t on a.ModuleID = t.ModuleID
  left join {databaseOwner}{objectQualifier}Tabs c on t.TabID = c.TabID
  where
     d.BusinessControllerClass = 'DotNetNuke.Modules.Events.EventController, DotNetNuke.Modules.Events' AND 
     c.PortalID = @PortalID and 
     a.ModuleID Not In  (select SubEventID from {databaseOwner}{objectQualifier}EventsMaster where ModuleID = @ModuleID) AND
     a.ModuleID Not In (select ModuleID from {databaseOwner}{objectQualifier}EventsMaster where SubEventID = @ModuleID) AND
     a.ModuleID != @ModuleID 
Group BY a.ModuleTitle, c.PortalID, a.ModuleID 
Order By a.ModuleTitle
GO

/*** EventsMasterDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterDelete
(
	@MasterID int
)
AS
DELETE {databaseOwner}{objectQualifier}EventsMaster WHERE MasterID = @MasterID
GO

/*** EventsMasterGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterGet
(
	@ModuleID int,
	@SubEventID int
)
AS
Select @ModuleID as ModuleID, b.PortalID, 0 as MasterID, a.ModuleID as SubEventID, a.ModuleTitle as SubEventTitle 
from {databaseOwner}{objectQualifier}Modules a
  left join {databaseOwner}{objectQualifier}TabModules t on a.ModuleID = t.ModuleID
  left join {databaseOwner}{objectQualifier}Tabs b on t.TabID = b.TabID
where
a.ModuleID = @SubEventID
Group BY a.ModuleTitle, b.PortalID, a.ModuleID 
Order By a.ModuleTitle
GO

/*** EventsMasterSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterSave
(
	@MasterID int,
	@ModuleID int,
	@SubEventID int
)
AS
IF @MasterID = 0 OR @MasterID IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsMaster
	(
		ModuleID,
		SubEventID
	)
	VALUES
	(
		@ModuleID,
		@SubEventID
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsMaster SET
		ModuleID = @ModuleID,
		SubEventID = @SubEventID
	WHERE MasterID = @MasterID

Select a.MasterID, a.ModuleID, b.ModuleTitle, a.SubEventID 
from {databaseOwner}{objectQualifier}EventsMaster a
left join {databaseOwner}{objectQualifier}Modules b on a.SubEventID = b.ModuleID 
WHERE a.MasterID = scope_identity()
Group BY a.MasterID, a.ModuleID, b.ModuleTitle, a.SubEventID
GO

/*** EventsModerateEvents ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsModerateEvents]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsModerateEvents]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsModerateEvents
(
	@ModuleID int
)
AS
SET DATEFORMAT mdy
SELECT EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
    --CreatedBy = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
    CreatedBy = U.DisplayName,
	CreatorID =  CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	MaxEnrollment,
	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	TimeZoneOffset
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
WHERE Approved = 0
	AND ModuleID = @ModuleID
ORDER BY EventDateBegin, EventDateEnd, (SELECT (datepart(hour, EventTimeBegin) * 10000) +
                      (datepart(minute, EventTimeBegin) * 100) +
                      (datepart(second, EventTimeBegin)))

GO

/*** EventsModerateSignups ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsModerateSignups]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsModerateSignups]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsModerateSignups
(
	@ModuleID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  c.EventDateBegin, c.EventTimeBegin,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
             		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
        PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
        PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
        PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
        PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		c.TimeZoneOffset
  from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where s.Approved = 0
  AND s.ModuleID = @ModuleID
ORDER BY c.EventDateBegin, c.EventTimeBegin, c.EventName, UserName
GO

/*** EventsNotificationDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationDelete
(
	@DeleteDateTime DateTime
)
AS
DELETE {databaseOwner}{objectQualifier}EventsNotification 
WHERE NotifyBydateTime <= @DeleteDateTime AND NotificationSent != 0
GO

/*** EventsNotificationGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationGet
(
	@EventID int,
	@UserEmail nvarchar(50),
	@EventDate datetime
)
AS
SELECT * 
FROM {databaseOwner}{objectQualifier}EventsNotification
WHERE EventID = @EventID And 
   UserEmail = @UserEmail And
   DATEADD(day, DATEDIFF(day, 0, EventTimeBegin), 0)  = DATEADD(day, DATEDIFF(day, 0, @EventDate), 0)

GO

/*** EventsNotificationList ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationList]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationList

AS
SELECT * 
FROM {databaseOwner}{objectQualifier}EventsNotification
Order By NotifyByDateTime DESC

GO

/*** EventsNotificationSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationSave
(
	@NotificationID int,
	@EventID int,
	@PortalAliasID int,
	@UserEmail nvarchar(50),
	@NotificationSent bit,
	@NotifyByDateTime DateTime,
	@EventTimeBegin DateTime,
	@NotifyLanguage nvarchar(10)
)
AS
SET DATEFORMAT mdy
IF @NotificationID = -1 OR @NotificationID IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsNotification
	(
		EventID,
		PortalAliasID,
		UserEmail,
		NotificationSent,
		NotifyByDateTime,
		EventTimeBegin,
		NotifyLanguage
	)
	VALUES
	(
		@EventID,
		@PortalAliasID,
		@UserEmail,
		@NotificationSent,
		@NotifyByDateTime,
		@EventTimeBegin, 
		@NotifyLanguage
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsNotification SET
		EventID = @EventID,
		PortalAliasID = @PortalAliasID,
		UserEmail = @UserEmail,
		NotificationSent = @NotificationSent,
		NotifyByDateTime = @NotifyByDateTime,
		EventTimeBegin = @EventTimeBegin,
		NotifyLanguage = @NotifyLanguage
	WHERE NotificationID = @NotificationID

SELECT * 
FROM {databaseOwner}{objectQualifier}EventsNotification
WHERE NotificationID = scope_identity()
GO

/*** EventsNotificationTimeChange ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationTimeChange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationTimeChange]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationTimeChange
(
	@EventID int,
	@NotifyTime DateTime
)
AS
SET DATEFORMAT mdy

UPDATE {databaseOwner}{objectQualifier}EventsNotification SET
	NotifyByDateTime = @NotifyTime
WHERE EventID = @EventID
GO

/*** EventsPPErrorLogAdd ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsPPErrorLogAdd]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsPPErrorLogAdd]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsPPErrorLogAdd
(
	@SignupID int, 
    @PayPalStatus varchar(50), 
	@PayPalReason varchar(100), 
	@PayPalTransID varchar(50), 
	@PayPalPayerID varchar(50), 
   	@PayPalPayerStatus varchar(50), 
	@PayPalRecieverEmail varchar(100), 
	@PayPalUserEmail varchar(100), 
   	@PayPalPayerEmail varchar(100), 
	@PayPalFirstName varchar(50), 
	@PayPalLastName varchar(50), 
	@PayPalAddress varchar(100), 
   	@PayPalCity varchar(25), 
	@PayPalState varchar(25), 
	@PayPalZip varchar(25), 
	@PayPalCountry varchar(25), 
   	@PayPalCurrency varchar(25), 
	@PayPalPaymentDate datetime , 
	@PayPalAmount money, 
	@PayPalFee money
)
AS
SET DATEFORMAT mdy
INSERT {databaseOwner}{objectQualifier}EventsPPErrorLog
(
	SignupID,
    PayPalStatus, 
	PayPalReason, 
	PayPalTransID, 
	PayPalPayerID, 
    PayPalPayerStatus, 
	PayPalRecieverEmail, 
	PayPalUserEmail,
    PayPalPayerEmail, 
	PayPalFirstName, 
	PayPalLastName, 
	PayPalAddress, 
    PayPalCity, 
	PayPalState, 
	PayPalZip, 
	PayPalCountry, 
    PayPalCurrency, 
	PayPalPaymentDate, 
	PayPalAmount, 
	PayPalFee
)
VALUES
(
	@SignupID,
    @PayPalStatus, 
	@PayPalReason, 
	@PayPalTransID, 
	@PayPalPayerID, 
    @PayPalPayerStatus, 
	@PayPalRecieverEmail, 
	@PayPalUserEmail,
    @PayPalPayerEmail, 
	@PayPalFirstName, 
	@PayPalLastName, 
	@PayPalAddress, 
    @PayPalCity, 
	@PayPalState, 
	@PayPalZip, 
	@PayPalCountry, 
    @PayPalCurrency, 
	@PayPalPaymentDate, 
	@PayPalAmount, 
	@PayPalFee
)

Select s.PayPalID, s.SignupID, CreateDate,
   		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
   		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
   		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
   		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
   		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee
from {databaseOwner}{objectQualifier}EventsPPErrorLog s 
Where  s.PayPalID = @@Identity
GO

/*** EventsPPErrorLogList ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsPPErrorLogList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsPPErrorLogList]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsPPErrorLogList
AS
SET DATEFORMAT mdy
Select s.PayPalID, s.SignupID, CreateDate,
   		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee
from {databaseOwner}{objectQualifier}EventsPPErrorLog s 
Order by CreateDate
GO

/*** EventsSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSave
(
	@PortalID int,
	@EventID int,
	@ModuleID int,
	@EventDateBegin datetime,
	@EventDateEnd datetime,
	@EventTimeBegin datetime,
	@Duration int,
	@EventName nvarchar(100),
	@EventDesc ntext,
	@Importance int,
	@CreatedBy varchar(100),
	@CreatorID varchar(100),
	@Every int,
	@Period nvarchar(10),
	@RepeatType char(10),
	@Notify nvarchar(100),
	@Approved bit,
	@Signups bit,
	@MaxEnrollment int,
	@EnrollRoleID varchar(50),
	@EnrollFee money, 
	@EnrollType varchar(10),
	@PayPalAccount varchar(100), 
	@PayPalPassword varchar(100), 
	@Cancelled bit,
	@ImageURL varchar(100), 
	@ImageType varchar(1), 
	@ImageWidth int,
	@ImageHeight int,
	@ImageDisplay bit,
	@Location int,
	@LocationName nvarchar(50),
	@MapURL varchar(255),
	@Category int,
	@CategoryName nvarchar(50),
	@Color varchar(10),
	@Reminder nvarchar(100),
	@TimezoneOffset int,
	@SendReminder bit,
	@ReminderTime int,
	@ReminderTimeMeasurement varchar(2),
	@ReminderFrom nvarchar(100),
	@SearchSubmitted bit
)
AS
SET DATEFORMAT mdy
IF @EventID = -1 OR @EventID IS NULL
	INSERT {databaseOwner}{objectQualifier}Events
	(
		PortalID,
		ModuleID,
		EventDateBegin,
		EventDateEnd,
		EventTimeBegin,
		Duration,
		EventName,
		EventDesc,
		Importance,
		CreatedBy,
		Every,
		Period,
		RepeatType,
		Notify,
		Approved,
		Signups,
		MaxEnrollment,
		EnrollRoleID,
		EnrollFee, 
		EnrollType, 
		PayPalAccount, 
		PayPalPassword, 
		Cancelled,
		ImageURL, 
		ImageType, 
		ImageWidth,
		ImageHeight,
		ImageDisplay,
		Location,
		Category,
		Reminder,
		TimezoneOffset,
		SendReminder,
		ReminderTime,
		ReminderTimeMeasurement,
		ReminderFrom,
		SearchSubmitted
	)
	VALUES
	(
		@PortalID,
		@ModuleID,
		@EventDateBegin,
		@EventDateEnd,
		@EventTimeBegin,
		@Duration,
		@EventName,
		@EventDesc,
		@Importance,
		@CreatorID,
		@Every,
		@Period,
		@RepeatType,
		@Notify,
		@Approved,
		@Signups,
		@MaxEnrollment,
		@EnrollRoleID,
		@EnrollFee, 
		@EnrollType,
		@PayPalAccount, 
		@PayPalPassword, 
		@Cancelled,
		@ImageURL, 
		@ImageType, 
		@ImageWidth,
		@ImageHeight,
		@ImageDisplay,
		@Location,
		@Category,
		@Reminder,
		@TimezoneOffset,
		@SendReminder,
		@ReminderTime,
		@ReminderTimeMeasurement,
		@ReminderFrom,
		@SearchSubmitted
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}Events SET
		PortalID = @PortalID,
		ModuleID = @ModuleID,
		EventDateBegin = @EventDateBegin,
		EventDateEnd = @EventDateEnd,
		EventTimeBegin = @EventTimeBegin,
		Duration = @Duration,
		EventName = @EventName,
		EventDesc = @EventDesc,
		Importance = @Importance,
		Every = @Every,
		Period = @Period,
		RepeatType = @RepeatType,
		Notify = @Notify,
		Approved = @Approved,
		Signups = @Signups,
		MaxEnrollment = @MaxEnrollment,
		EnrollRoleID = @EnrollRoleID,
		EnrollFee = @EnrollFee, 
		EnrollType = @EnrollType,
		PayPalAccount = @PayPalAccount, 
		PayPalPassword = @PayPalPassword, 
		Cancelled = @Cancelled,
		ImageURL = @ImageURL, 
		ImageType = @ImageType, 
		ImageWidth = @ImageWidth,
		ImageHeight = @ImageHeight,
		ImageDisplay = @ImageDisplay,
		Location = @Location,
		Category = @Category,
		Reminder = @Reminder,
		TimezoneOffset = @TimezoneOffset,
		SendReminder = @SendReminder,
		ReminderTime = @ReminderTime,
		ReminderTimeMeasurement = @ReminderTimeMeasurement,
		ReminderFrom = @ReminderFrom,
		SearchSubmitted = @SearchSubmitted
	WHERE EventID = @EventID

SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
   --   	CreatedBy = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
    CreatedBy = U.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	c.Location,
	c.LocationName,
	c.MapURL,
	b.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement,
	ReminderFrom
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE EventID = scope_identity()
GO

/*** EventsSaveSearchSubmit ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSaveSearchSubmit]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSaveSearchSubmit]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSaveSearchSubmit
(
	@EventID int,
	@SearchSubmitted bit
)
AS
SET DATEFORMAT mdy
UPDATE {databaseOwner}{objectQualifier}Events 
   SET SearchSubmitted = @SearchSubmitted
	WHERE EventID = @EventID
GO

/*** EventsSignupsDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsDelete
(
	@SignupID int
)
AS
DELETE {databaseOwner}{objectQualifier}EventsSignups WHERE SignupID = @SignupID
GO

/*** EventsSignupsGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGet
(
	@SignupID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,#
  u.DisplayName as UserName, u.Email,
  s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where  s.SignupID = @SignupID
GO

/*** EventsSignupsGetEvent ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetEvent]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetEvent
(
	@EventID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where  s.EventID = @EventID
ORDER BY s.EventTimeBegin, c.EventName, UserName
GO

/*** EventsSignupsGetUser ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetUser]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetUser]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetUser
(
	@EventID int,
	@UserID int,
	@EventDate datetime
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  -- u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as USerName, u.Email,
 s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where  s.EventID = @EventID And
             s.Userid = @UserID And
             DATEADD(day, DATEDIFF(day, 0, s.EventTimeBegin), 0)  = DATEADD(day, DATEDIFF(day, 0, @EventDate), 0)
GO

/*** EventsSignupsPPTransCount ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsPPTransCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsPPTransCount]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsPPTransCount
(
	@PayPalTransID varchar(50)
)
AS
Select  count(*) as Count
from {databaseOwner}{objectQualifier}EventsSignups s 
Where  s.PayPalTransID = @PayPalTransID
AND PayPalStatus = 'completed'
GO

/*** EventsSignupsSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsSave
(
	@EventID int, 
	@SignupID int, 
	@ModuleID int, 
	@UserID int,
 	@Approved int,
    @PayPalStatus varchar(50), 
	@PayPalReason varchar(100), 
	@PayPalTransID varchar(50), 
	@PayPalPayerID varchar(50), 
	@PayPalPayerStatus varchar(50), 
	@PayPalRecieverEmail varchar(100), 
	@PayPalUserEmail varchar(100), 
	@PayPalPayerEmail varchar(100), 
	@PayPalFirstName varchar(50), 
	@PayPalLastName varchar(50), 
	@PayPalAddress varchar(100), 
	@PayPalCity varchar(25), 
	@PayPalState varchar(25), 
	@PayPalZip varchar(25), 
	@PayPalCountry varchar(25), 
	@PayPalCurrency varchar(25), 
	@PayPalPaymentDate datetime , 
	@PayPalAmount money, 
	@PayPalFee money,
	@EventTimeBegin datetime,
	@TimeZoneOffset int
)
AS
SET DATEFORMAT mdy
IF @SignupID = 0 OR @SignupID IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsSignups
	(
		EventID,
		ModuleID,
		UserID,
		Approved,
		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		EventTimeBegin,
		TimeZoneOffset
	)
	VALUES
	(
		@EventID,
		@ModuleID,
		@UserID,
		@Approved,
 		@PayPalStatus, 
		@PayPalReason, 
		@PayPalTransID, 
		@PayPalPayerID, 
		@PayPalPayerStatus, 
		@PayPalRecieverEmail, 
		@PayPalUserEmail,
		@PayPalPayerEmail, 
		@PayPalFirstName, 
		@PayPalLastName, 
		@PayPalAddress, 
		@PayPalCity, 
		@PayPalState, 
		@PayPalZip, 
		@PayPalCountry, 
		@PayPalCurrency, 
		@PayPalPaymentDate, 
		@PayPalAmount, 
		@PayPalFee,
		@EventTimeBegin,	
		@TimeZoneOffset
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsSignups SET
		EventID = @EventID,
		ModuleID = @ModuleID,
		UserID = @UserID,
		Approved = @Approved,
 		PayPalStatus = @PayPalStatus, 
		PayPalReason = @PayPalReason, 
		PayPalTransID = @PayPalTransID, 
		PayPalPayerID = @PayPalPayerID, 
		PayPalPayerStatus = @PayPalPayerStatus, 
		PayPalRecieverEmail = @PayPalRecieverEmail, 
		PayPalUserEmail = @PayPalUserEmail,
		PayPalPayerEmail = @PayPalPayerEmail, 
		PayPalFirstName = @PayPalFirstName, 
		PayPalLastName = @PayPalLastName, 
		PayPalAddress = @PayPalAddress, 
		PayPalCity = @PayPalCity, 
		PayPalState = @PayPalState, 
		PayPalZip = @PayPalZip, 
		PayPalCountry = @PayPalCountry, 
		PayPalCurrency = @PayPalCurrency, 
		PayPalPaymentDate = @PayPalPaymentDate, 
		PayPalAmount = @PayPalAmount, 
		PayPalFee = @PayPalFee,
		EventTimeBegin = @EventTimeBegin,
		TimeZoneOffset = @TimeZoneOffset
	WHERE SignupID = @SignupID

Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
  from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where  s.SignupID = scope_identity()
ORDER BY s.EventTimeBegin, c.EventName, UserName
GO

/*** EventsTimeZoneUpgrade ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsTimeZoneUpgrade]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsTimeZoneUpgrade]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsTimeZoneUpgrade
(
	@ModuleID int, 
	@TimeZoneOffset int
)
AS
SET DATEFORMAT mdy
DECLARE @GMTBeginTime as DateTime
DECLARE @GMTBeginDate as DateTime
DECLARE @GMTEndDate as DateTime
UPDATE {databaseOwner}{objectQualifier}Events 
  SET TimezoneOffset = @TimeZoneOffset
  WHERE ModuleID = @ModuleID
GO

/*** EventsUpgrade ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsUpgrade]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsUpgrade]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsUpgrade
(
	@ModuleID	int
)
AS

SET DATEFORMAT mdy

IF (SELECT Count(*) from {databaseOwner}{objectQualifier}Schedule WHERE TypeFullName = 'DotNetNuke.Modules.Events.EventNotification, DotNetNuke.Modules.Events') = 0 
	INSERT {databaseOwner}{objectQualifier}Schedule
	(
		TypeFullName,
		AttachToEvent,
		CatchUpEnabled,
		Enabled,
		ObjectDependencies,
		RetainHistoryNum,
		Servers,
		TimeLapse,
		TimeLapseMeasurement,
		RetryTimeLapse,
		RetryTimeLapseMeasurement
	)
	VALUES
	(
		'DotNetNuke.Modules.Events.EventNotification, DotNetNuke.Modules.Events',
		'',
		0,
		0,
		'',
		10,
		'',
		30,		
		'm',
		30,
		'm'
	)    

  SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
    --CreatedBy = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
    CreatedBy = u.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	E.Location,
	c.LocationName,
	c.MapURL,
	E.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement
  FROM {databaseOwner}{objectQualifier}Events E
  left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
  left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
  left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
  WHERE PayPalAccount = 'UPGRADEDEVENT' and ModuleID = @ModuleID
  
GO
