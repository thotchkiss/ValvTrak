    /************************************************************/
    /*****                                                  *****/
    /*****       SqlDataProvider                            *****/
    /*****       Install/Upgrade for Events module 4.0.1    *****/
    /*****                                                  *****/
    /*****       Build post 4.0.0 release review            *****/
    /*****                                                  *****/
    /***** Note: To manually execute this script you must   *****/
    /*****       perform a search AND replace operation     *****/
    /*****       for {databaseOwner} AND {objectQualifier}  *****/
    /*****       or use 'SQL' FROM Host Menu AND run this.  *****/
    /*****                                                  *****/
    /************************************************************/


/* Add CustomFields to Events Table */

ALTER TABLE {databaseOwner}{objectQualifier}Events ADD CustomField1 nvarchar (100) NULL
GO

ALTER TABLE {databaseOwner}{objectQualifier}Events ADD CustomField2 nvarchar (100) NULL
GO

/* Update Module Settings EventsListFields */

UPDATE {databaseOwner}{objectQualifier}ModuleSettings SET SettingValue = Replace(Replace(Replace(Replace(Replace([SettingValue],'5','10'),'4','05'),'3','04'),'2','03'),'1;','02;')
WHERE SettingName = 'EventsListFields'
GO

/* Add ModuleID to Notifications Table */

ALTER TABLE {databaseOwner}{objectQualifier}EventsNotification ADD ModuleID int NULL
GO

/* Populate ModuleID field in EventsNotification table */

UPDATE    {databaseOwner}{objectQualifier}EventsNotification
		SET ModuleID = {databaseOwner}{objectQualifier}Events.ModuleID
		FROM {databaseOwner}{objectQualifier}EventsNotification LEFT OUTER JOIN {databaseOwner}{objectQualifier}Events 
		     ON {databaseOwner}{objectQualifier}EventsNotification.EventID = {databaseOwner}{objectQualifier}Events.EventID
GO

/* Add LastUpdateDate to Events Table */

ALTER TABLE {databaseOwner}{objectQualifier}Events ADD LastUpdatedAt datetime NULL
GO

/* Populate LastUpdatedAt field in Events table */

UPDATE    {databaseOwner}{objectQualifier}Events
		SET LastUpdatedAt = EventDateBegin
		WHERE LastUpdatedAt is null and EventDateBegin <= GetDate()
GO

UPDATE    {databaseOwner}{objectQualifier}Events
		SET LastUpdatedAt = GetUTCDate()
		WHERE LastUpdatedAt is null and EventDateBegin > GetDate()
GO

/* Drop Stored Procs */

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSave]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGet]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByRange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByRange]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsPPTransCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsPPTransCount]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsPPErrorLogList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsPPErrorLogList]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationList]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSaveSearchSubmit]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSaveSearchSubmit]
GO

/* Drop Unused Stored Procs */

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByDate]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsGetByMonthYear]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsGetByMonthYear]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsPPTransCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsPPTransCount]
GO

/* Add Stored Procs */

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSave
(
	@PortalID int,
	@EventID int,
	@ModuleID int,
	@EventDateBegin datetime,
	@EventDateEnd datetime,
	@EventTimeBegin datetime,
	@Duration int,
	@EventName nvarchar(100),
	@EventDesc ntext,
	@Importance int,
	@CreatedBy varchar(100),
	@CreatorID varchar(100),
	@Every int,
	@Period nvarchar(10),
	@RepeatType char(10),
	@Notify nvarchar(100),
	@Approved bit,
	@Signups bit,
	@MaxEnrollment int,
	@EnrollRoleID varchar(50),
	@EnrollFee money, 
	@EnrollType varchar(10),
	@PayPalAccount varchar(100), 
	@PayPalPassword varchar(100), 
	@Cancelled bit,
	@ImageURL varchar(100), 
	@ImageType varchar(1), 
	@ImageWidth int,
	@ImageHeight int,
	@ImageDisplay bit,
	@Location int,
	@LocationName nvarchar(50),
	@MapURL varchar(255),
	@Category int,
	@CategoryName nvarchar(50),
	@Color varchar(10),
	@Reminder nvarchar(100),
	@TimezoneOffset int,
	@SendReminder bit,
	@ReminderTime int,
	@ReminderTimeMeasurement varchar(2),
	@ReminderFrom nvarchar(100),
	@SearchSubmitted bit,
	@CustomField1 nvarchar(100),
	@CustomField2 nvarchar(100)
)
AS
SET DATEFORMAT mdy
IF @EventID = -1 OR @EventID IS NULL
	INSERT {databaseOwner}{objectQualifier}Events
	(
		PortalID,
		ModuleID,
		EventDateBegin,
		EventDateEnd,
		EventTimeBegin,
		Duration,
		EventName,
		EventDesc,
		Importance,
		CreatedBy,
		Every,
		Period,
		RepeatType,
		Notify,
		Approved,
		Signups,
		MaxEnrollment,
		EnrollRoleID,
		EnrollFee, 
		EnrollType, 
		PayPalAccount, 
		PayPalPassword, 
		Cancelled,
		ImageURL, 
		ImageType, 
		ImageWidth,
		ImageHeight,
		ImageDisplay,
		Location,
		Category,
		Reminder,
		TimezoneOffset,
		SendReminder,
		ReminderTime,
		ReminderTimeMeasurement,
		ReminderFrom,
		SearchSubmitted,
		CustomField1,
		CustomField2,
		LastUpdatedAt
	)
	VALUES
	(
		@PortalID,
		@ModuleID,
		@EventDateBegin,
		@EventDateEnd,
		@EventTimeBegin,
		@Duration,
		@EventName,
		@EventDesc,
		@Importance,
		@CreatorID,
		@Every,
		@Period,
		@RepeatType,
		@Notify,
		@Approved,
		@Signups,
		@MaxEnrollment,
		@EnrollRoleID,
		@EnrollFee, 
		@EnrollType,
		@PayPalAccount, 
		@PayPalPassword, 
		@Cancelled,
		@ImageURL, 
		@ImageType, 
		@ImageWidth,
		@ImageHeight,
		@ImageDisplay,
		@Location,
		@Category,
		@Reminder,
		@TimezoneOffset,
		@SendReminder,
		@ReminderTime,
		@ReminderTimeMeasurement,
		@ReminderFrom,
		@SearchSubmitted,
		@CustomField1,
		@CustomField2,
		GetUTCDate()
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}Events SET
		PortalID = @PortalID,
		EventDateBegin = @EventDateBegin,
		EventDateEnd = @EventDateEnd,
		EventTimeBegin = @EventTimeBegin,
		Duration = @Duration,
		EventName = @EventName,
		EventDesc = @EventDesc,
		Importance = @Importance,
		Every = @Every,
		Period = @Period,
		RepeatType = @RepeatType,
		Notify = @Notify,
		Approved = @Approved,
		Signups = @Signups,
		MaxEnrollment = @MaxEnrollment,
		EnrollRoleID = @EnrollRoleID,
		EnrollFee = @EnrollFee, 
		EnrollType = @EnrollType,
		PayPalAccount = @PayPalAccount, 
		PayPalPassword = @PayPalPassword, 
		Cancelled = @Cancelled,
		ImageURL = @ImageURL, 
		ImageType = @ImageType, 
		ImageWidth = @ImageWidth,
		ImageHeight = @ImageHeight,
		ImageDisplay = @ImageDisplay,
		Location = @Location,
		Category = @Category,
		Reminder = @Reminder,
		TimezoneOffset = @TimezoneOffset,
		SendReminder = @SendReminder,
		ReminderTime = @ReminderTime,
		ReminderTimeMeasurement = @ReminderTimeMeasurement,
		ReminderFrom = @ReminderFrom,
		SearchSubmitted = @SearchSubmitted,
		CustomField1 = @CustomField1,
		CustomField2 = @CustomField2,
		LastUpdatedAt = GetUTCDate()
WHERE EventID = @EventID And ModuleID = @ModuleID
      
SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
   --   	CreatedBy = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
    CreatedBy = U.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	c.Location,
	c.LocationName,
	c.MapURL,
	b.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement,
	ReminderFrom,
	CustomField1,
	CustomField2,
	LastUpdatedAt
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
WHERE EventID = scope_identity()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGet
(
	@EventID int,
	@ModuleID int
)
AS
SET DATEFORMAT mdy
SELECT E.PortalID, EventID, e.ModuleID, EventDateBegin, EventDateEnd,
	EventTimeBegin, Duration, EventName, EventDesc,
	Importance, E.CreatedDate, 
    --CreatedBy = {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {databaseOwner}{objectQualifier}Users.LastName,
    CreatedBy = u.DisplayName,
	CreatorID =  E.CreatedBy,
	Every,
	Period,
	RepeatType,
	Notify,
	Approved,
	Signups,
	MaxEnrollment,
 	(Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
	EnrollRoleID,
	EnrollFee, 
	EnrollType, 
	PayPalAccount, 
	PayPalPassword, 
	Cancelled,
	ImageURL, 
	ImageType, 
	ImageWidth,
	ImageHeight,
	ImageDisplay,
	E.Location,
	c.LocationName,
	c.MapURL,
	E.Category,
	b.CategoryName,
	b.Color,
	Reminder,
	TimezoneOffset,
	SendReminder,
	ReminderTime,
	ReminderTimeMeasurement,
	ReminderFrom,
	SearchSubmitted,
	CustomField1,
	CustomField2,
	LastUpdatedAt,
	(Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle 
FROM {databaseOwner}{objectQualifier}Events E
left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
left outer join {databaseOwner}{objectQualifier}EventsMaster m ON e.ModuleID = m.SubEventID
WHERE EventID = @EventID And
      (e.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)

GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsGetByRange
(
 @Modules nvarchar(255),
 @BeginDate datetime,
 @EndDate datetime,
 @Category nvarchar(50)
)
AS
SET DATEFORMAT mdy
IF (LEN(@Modules) = 0)
BEGIN
/** Added for Module Notification Scheduling 
 NOTE: This version Solves EndDate issue by Adding 1 day to EndDate for WHERE clause
**/
  SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
 EventTimeBegin, Duration, EventName, EventDesc,
 Importance, E.CreatedDate, 
 CreatedBy = U.DisplayName,
 CreatorID =  E.CreatedBy,
 Every,
 Period,
 RepeatType,
 Notify,
 Approved,
 Signups,
 MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
 EnrollRoleID,
 EnrollFee, 
 EnrollType, 
 PayPalAccount, 
 PayPalPassword, 
 Cancelled,
 ImageURL, 
 ImageType, 
 ImageWidth,
 ImageHeight,
 ImageDisplay,
 E.Location,
 c.LocationName,
 c.MapURL,
 E.Category,
 b.CategoryName,
 b.Color,
 Reminder,
 TimezoneOffset,
 SendReminder,
 ReminderTime,
 ReminderTimeMeasurement,
 ReminderFrom,
 SearchSubmitted,
 CustomField1,
 CustomField2,
 LastUpdatedAt,
  (Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle 
  FROM {databaseOwner}{objectQualifier}Events E
  left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
  left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
  left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
  WHERE (((EventTimeBegin <= DATEADD(DAY,1,@EndDate) AND DATEADD(minute,Duration,EventTimeBegin) >= @BeginDate) OR 
                   (EventTimeBegin BETWEEN @BeginDate  AND DATEADD(DAY,1,@EndDate)) OR 
                   (EventTimeBegin <=DATEADD(DAY,1,@EndDate) AND EventDateEnd >= @BeginDate AND RepeatType <> 'N'))
 AND (ModuleID in (SELECT * FROM {databaseOwner}[{objectQualifier}SplitIDs](@Modules)))
 AND (Approved = 1)
 AND (b.CategoryName = @Category OR @Category = ''))
  ORDER BY EventDateBegin, EventTimeBegin, EventDateEnd
END
ELSE
BEGIN
  SELECT E.PortalID, EventID, ModuleID, EventDateBegin, EventDateEnd,
 EventTimeBegin, Duration, EventName, EventDesc,
 Importance, E.CreatedDate, 
 createdBy = U.DisplayName,
 CreatorID =  E.CreatedBy,
 Every,
 Period,
 RepeatType,
 Notify,
 Approved,
 Signups,
 MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = E.EventID and E.Signups = 1) as Enrolled,
 EnrollRoleID,
 EnrollFee, 
 EnrollType, 
 PayPalAccount, 
 PayPalPassword, 
 Cancelled,
 ImageURL, 
 ImageType, 
 ImageWidth,
 ImageHeight,
 ImageDisplay,
 E.Location,
 c.LocationName,
 c.MapURL,
 E.Category,
 b.CategoryName,
 b.Color,
 Reminder,
 TimezoneOffset,
 SendReminder,
 ReminderTime,
 ReminderTimeMeasurement,
 CustomField1,
 CustomField2,
 LastUpdatedAt,
  (Select ModuleTitle from {databaseOwner}{objectQualifier}Modules WHERE ModuleID = E.ModuleID) as ModuleTitle 
  FROM {databaseOwner}{objectQualifier}Events E
  left outer join {databaseOwner}{objectQualifier}Users U on E.CreatedBy = U.UserID
  left join {databaseOwner}{objectQualifier}EventsCategory b on E.Category = b.Category
  left join {databaseOwner}{objectQualifier}EventsLocation c on E.Location = c.Location
  WHERE (((EventTimeBegin <= DATEADD(DAY,1,@EndDate) AND DATEADD(minute,Duration,EventTimeBegin) >= @BeginDate) OR 
                   (EventTimeBegin BETWEEN @BeginDate  AND DATEADD(DAY,1,@EndDate)) OR 
                   (EventTimeBegin <=DATEADD(DAY,1,@EndDate) AND EventDateEnd >= @BeginDate AND RepeatType <> 'N'))
 AND (ModuleID in (SELECT * FROM {databaseOwner}[{objectQualifier}SplitIDs](@Modules)))
 AND (Approved = 1)
 AND (b.CategoryName = @Category OR @Category = ''))
  ORDER BY EventDateBegin, EventTimeBegin, EventDateEnd
END
GO


/*** EventsDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsDelete
(
	@EventID int,
	@ModuleID int
)
AS
DELETE FROM {databaseOwner}{objectQualifier}Events
FROM        {databaseOwner}{objectQualifier}Events LEFT OUTER JOIN {databaseOwner}{objectQualifier}EventsMaster ON 
            {databaseOwner}{objectQualifier}Events.ModuleID = {databaseOwner}{objectQualifier}EventsMaster.SubEventID
WHERE EventID = @EventID and 
      ({databaseOwner}{objectQualifier}Events.ModuleID = @ModuleID or 
      {databaseOwner}{objectQualifier}EventsMaster.ModuleID = @ModuleID)
GO

/*** EventsMasterDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsMasterDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsMasterDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsMasterDelete
(
	@MasterID int,
	@ModuleID int
)
AS
DELETE {databaseOwner}{objectQualifier}EventsMaster WHERE MasterID = @MasterID and ModuleID = @ModuleID
GO

/*** EventsSignupsDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsDelete
(
	@SignupID int,
	@ModuleID int
)
AS
DELETE FROM {databaseOwner}{objectQualifier}EventsSignups 
FROM        {databaseOwner}{objectQualifier}EventsSignups LEFT OUTER JOIN {databaseOwner}{objectQualifier}EventsMaster ON 
            {databaseOwner}{objectQualifier}EventsSignups.ModuleID = {databaseOwner}{objectQualifier}EventsMaster.SubEventID
WHERE SignupID = @SignupID And 
      ({databaseOwner}{objectQualifier}EventsSignups.ModuleID = @ModuleID Or 
      {databaseOwner}{objectQualifier}EventsMaster.ModuleID = @ModuleID)
GO

/*** EventsSignupsGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGet
(
	@SignupID int,
	@ModuleID int,
	@PPIPN bit
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,#
  u.DisplayName as UserName, u.Email,
  s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
   Left Outer Join {databaseOwner}{objectQualifier}EventsMaster m ON s.ModuleID = m.SubEventID
Where  s.SignupID = @SignupID And
       (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID Or @PPIPN <> 0)
GO

/*** EventsSignupsGetEvent ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetEvent]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetEvent]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetEvent
(
	@EventID int,
	@ModuleID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
   Left Outer Join {databaseOwner}{objectQualifier}EventsMaster m ON s.ModuleID = m.SubEventID
Where  s.EventID = @EventID And
       (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)
ORDER BY s.EventTimeBegin, c.EventName, UserName
GO

/*** EventsSignupsGetUser ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsGetUser]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsGetUser]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsGetUser
(
	@EventID int,
	@UserID int,
	@EventDate datetime,
	@ModuleID int
)
AS
SET DATEFORMAT mdy
Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  -- u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as USerName, u.Email,
 s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
 from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
   Left Outer Join {databaseOwner}{objectQualifier}EventsMaster m ON s.ModuleID = m.SubEventID
Where  s.EventID = @EventID And
             s.Userid = @UserID And
             DATEADD(day, DATEDIFF(day, 0, s.EventTimeBegin), 0)  = DATEADD(day, DATEDIFF(day, 0, @EventDate), 0) and
             (s.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)
GO

/*** EventsSignupsSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsSignupsSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsSignupsSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsSignupsSave
(
	@EventID int, 
	@SignupID int, 
	@ModuleID int, 
	@UserID int,
 	@Approved int,
    @PayPalStatus varchar(50), 
	@PayPalReason varchar(100), 
	@PayPalTransID varchar(50), 
	@PayPalPayerID varchar(50), 
	@PayPalPayerStatus varchar(50), 
	@PayPalRecieverEmail varchar(100), 
	@PayPalUserEmail varchar(100), 
	@PayPalPayerEmail varchar(100), 
	@PayPalFirstName varchar(50), 
	@PayPalLastName varchar(50), 
	@PayPalAddress varchar(100), 
	@PayPalCity varchar(25), 
	@PayPalState varchar(25), 
	@PayPalZip varchar(25), 
	@PayPalCountry varchar(25), 
	@PayPalCurrency varchar(25), 
	@PayPalPaymentDate datetime , 
	@PayPalAmount money, 
	@PayPalFee money,
	@EventTimeBegin datetime,
	@TimeZoneOffset int
)
AS
SET DATEFORMAT mdy
IF @SignupID = 0 OR @SignupID IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsSignups
	(
		EventID,
		ModuleID,
		UserID,
		Approved,
		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		EventTimeBegin,
		TimeZoneOffset
	)
	VALUES
	(
		@EventID,
		@ModuleID,
		@UserID,
		@Approved,
 		@PayPalStatus, 
		@PayPalReason, 
		@PayPalTransID, 
		@PayPalPayerID, 
		@PayPalPayerStatus, 
		@PayPalRecieverEmail, 
		@PayPalUserEmail,
		@PayPalPayerEmail, 
		@PayPalFirstName, 
		@PayPalLastName, 
		@PayPalAddress, 
		@PayPalCity, 
		@PayPalState, 
		@PayPalZip, 
		@PayPalCountry, 
		@PayPalCurrency, 
		@PayPalPaymentDate, 
		@PayPalAmount, 
		@PayPalFee,
		@EventTimeBegin,	
		@TimeZoneOffset
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsSignups SET
		EventID = @EventID,
		UserID = @UserID,
		Approved = @Approved,
 		PayPalStatus = @PayPalStatus, 
		PayPalReason = @PayPalReason, 
		PayPalTransID = @PayPalTransID, 
		PayPalPayerID = @PayPalPayerID, 
		PayPalPayerStatus = @PayPalPayerStatus, 
		PayPalRecieverEmail = @PayPalRecieverEmail, 
		PayPalUserEmail = @PayPalUserEmail,
		PayPalPayerEmail = @PayPalPayerEmail, 
		PayPalFirstName = @PayPalFirstName, 
		PayPalLastName = @PayPalLastName, 
		PayPalAddress = @PayPalAddress, 
		PayPalCity = @PayPalCity, 
		PayPalState = @PayPalState, 
		PayPalZip = @PayPalZip, 
		PayPalCountry = @PayPalCountry, 
		PayPalCurrency = @PayPalCurrency, 
		PayPalPaymentDate = @PayPalPaymentDate, 
		PayPalAmount = @PayPalAmount, 
		PayPalFee = @PayPalFee,
		EventTimeBegin = @EventTimeBegin,
		TimeZoneOffset = @TimeZoneOffset
	WHERE SignupID = @SignupID and ModuleID = @ModuleID

Select s.EventID, s.SignupID, s.ModuleID, s.Userid, s.Approved,
  --u.FirstName + ' ' + u.LastName as UserName,
  u.DisplayName as UserName, u.Email,
  s.EventTimeBegin,c.Duration,c.EventName,c.Importance,c.Approved as EventApproved,
  c.MaxEnrollment,
  (Select count(*) from {databaseOwner}{objectQualifier}EventsSignups WHERE EventID = c.EventID and c.Signups = 1) as Enrolled,
 		PayPalStatus, 
		PayPalReason, 
		PayPalTransID, 
		PayPalPayerID, 
		PayPalPayerStatus, 
		PayPalRecieverEmail, 
		PayPalUserEmail,
		PayPalPayerEmail, 
		PayPalFirstName, 
		PayPalLastName, 
		PayPalAddress, 
		PayPalCity, 
		PayPalState, 
		PayPalZip, 
		PayPalCountry, 
		PayPalCurrency, 
		PayPalPaymentDate, 
		PayPalAmount, 
		PayPalFee,
		s.TimeZoneOffset
  from {databaseOwner}{objectQualifier}EventsSignups s 
   Left Join {databaseOwner}{objectQualifier}Users u ON s.UserID = u.UserID
   Left Join {databaseOwner}{objectQualifier}Events c ON s.EventID = c.EventID
Where  s.SignupID = scope_identity()
ORDER BY s.EventTimeBegin, c.EventName, UserName
GO

/*** EventsLocationDelete ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationDelete]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationDelete
(
	@Location int,
	@PortalID int
)
AS
UPDATE {databaseOwner}{objectQualifier}Events SET Location = 0  WHERE Location = @Location and PortalID = @PortalID
DELETE {databaseOwner}{objectQualifier}EventsLocation WHERE Location = @Location and PortalID = @PortalID
GO

/*** EventsLocationGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationGet
(
	@Location int,
	@PortalID int
)
AS
SELECT Location, PortalID, LocationName, MapURL
FROM {databaseOwner}{objectQualifier}EventsLocation
WHERE Location = @Location and PortalID = @PortalID
GO

/*** EventsLocationSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsLocationSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsLocationSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsLocationSave
(
	@PortalID int,
	@Location int,
	@LocationName nvarchar(50),
	@MapURL nvarchar(255)
)
AS
IF @Location = 0 OR @Location IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsLocation
	(
		PortalID,
		LocationName,
		MapURL
	)
	VALUES
	(
		@PortalID,
		@LocationName,
		@MapURL
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsLocation SET
		LocationName = @LocationName,
		MapURL = @MapURL
	WHERE Location = @Location and PortalID = @PortalID
SELECT Location, PortalID, LocationName, MapURL
FROM {databaseOwner}{objectQualifier}EventsLocation
WHERE Location = scope_identity()
GO

/*** EventsNotificationSave ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationSave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationSave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationSave
(
	@NotificationID int,
	@EventID int,
	@PortalAliasID int,
	@UserEmail nvarchar(50),
	@NotificationSent bit,
	@NotifyByDateTime DateTime,
	@EventTimeBegin DateTime,
	@NotifyLanguage nvarchar(10),
	@ModuleID int
)
AS
SET DATEFORMAT mdy
IF @NotificationID = -1 OR @NotificationID IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsNotification
	(
		EventID,
		PortalAliasID,
		UserEmail,
		NotificationSent,
		NotifyByDateTime,
		EventTimeBegin,
		NotifyLanguage,
		ModuleID
	)
	VALUES
	(
		@EventID,
		@PortalAliasID,
		@UserEmail,
		@NotificationSent,
		@NotifyByDateTime,
		@EventTimeBegin, 
		@NotifyLanguage,
		@ModuleID
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsNotification SET
		EventID = @EventID,
		PortalAliasID = @PortalAliasID,
		UserEmail = @UserEmail,
		NotificationSent = @NotificationSent,
		NotifyByDateTime = @NotifyByDateTime,
		EventTimeBegin = @EventTimeBegin,
		NotifyLanguage = @NotifyLanguage
	WHERE NotificationID = @NotificationID and ModuleID = @ModuleID

SELECT * 
FROM {databaseOwner}{objectQualifier}EventsNotification
WHERE NotificationID = scope_identity()
GO

/*** EventsNotificationGet ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationGet]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationGet
(
	@EventID int,
	@UserEmail nvarchar(50),
	@EventDate datetime,
	@ModuleID int
)
AS
SELECT * 
FROM {databaseOwner}{objectQualifier}EventsNotification n
   Left Outer Join {databaseOwner}{objectQualifier}EventsMaster m ON n.ModuleID = m.SubEventID
WHERE EventID = @EventID And 
   UserEmail = @UserEmail And
   DATEADD(day, DATEDIFF(day, 0, EventTimeBegin), 0)  = DATEADD(day, DATEDIFF(day, 0, @EventDate), 0)And
   (n.ModuleID = @ModuleID Or m.ModuleID = @ModuleID)

GO

/*** EventsNotificationTimeChange ***/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsNotificationTimeChange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsNotificationTimeChange]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsNotificationTimeChange
(
	@EventID int,
	@NotifyTime DateTime,
	@ModuleID int
)
AS
SET DATEFORMAT mdy

UPDATE {databaseOwner}{objectQualifier}EventsNotification 
	SET	NotifyByDateTime = @NotifyTime
FROM {databaseOwner}{objectQualifier}EventsNotification LEFT OUTER JOIN {databaseOwner}{objectQualifier}EventsMaster ON 
     {databaseOwner}{objectQualifier}EventsNotification.ModuleID = {databaseOwner}{objectQualifier}EventsMaster.SubEventID
WHERE EventID = @EventID and 
      ({databaseOwner}{objectQualifier}EventsNotification.ModuleID = @ModuleID or 
      {databaseOwner}{objectQualifier}EventsMaster.ModuleID = @ModuleID)
GO

/*** EventsCategoryChange ***/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategoryDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategoryDelete]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategoryGet]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategoryGet]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}EventsCategorySave]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}EventsCategorySave]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategoryDelete
(
	@Category int,
	@PortalID int
)
AS
UPDATE {databaseOwner}{objectQualifier}Events SET Category = 0 WHERE Category = @Category AND PortalID = @PortalID
DELETE {databaseOwner}{objectQualifier}EventsCategory WHERE Category = @Category AND PortalID = @PortalID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategoryGet
(
	@Category int,
	@PortalID int
)
AS
SELECT Category, PortalID, CategoryName, Color
FROM {databaseOwner}{objectQualifier}EventsCategory
WHERE Category = @Category AND PortalID = @PortalID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EventsCategorySave
(
	@PortalID int,
	@Category int,
	@CategoryName nvarchar(50),
	@Color varchar(10)
)
AS
IF @Category = 0 OR @Category IS NULL
	INSERT {databaseOwner}{objectQualifier}EventsCategory
	(
		PortalID,
		CategoryName,
		Color
	)
	VALUES
	(
		@PortalID,
		@CategoryName,
		@Color
	)
ELSE
	UPDATE {databaseOwner}{objectQualifier}EventsCategory SET
		CategoryName = @CategoryName,
		Color = @Color
	WHERE Category = @Category And PortalID = @PortalID

SELECT Category, PortalID, CategoryName, Color
FROM {databaseOwner}{objectQualifier}EventsCategory
WHERE Category = scope_identity()
GO
